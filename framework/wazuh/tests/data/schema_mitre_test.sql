CREATE TABLE attack (id TEXT PRIMARY KEY, json TEXT);

CREATE TABLE has_phase (
                        attack_id TEXT, 
                        phase_name TEXT,
                        FOREIGN KEY(attack_id) REFERENCES attack(id),
                        PRIMARY KEY (attack_id, phase_name)
                        );

CREATE TABLE has_platform (
                           attack_id TEXT, 
                           platform_name TEXT,
                           FOREIGN KEY(attack_id) REFERENCES attack(id),
                           PRIMARY KEY (attack_id, platform_name)
                           );

INSERT INTO attack (id,json) VALUES (
'T1156','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1156", "source_name": "mitre-attack", "external_id": "T1156"}, {"url": "https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/", "source_name": "amnesia malware", "description": "Claud Xiao, Cong Zheng, Yanhui Jia. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Botnet. Retrieved February 19, 2018."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["File monitoring", "Process monitoring", "Process command-line parameters", "Process use of network"], "modified": "2018-10-31T13:45:13.024Z", "x_mitre_detection": "While users may customize their <code>~/.bashrc</code> and <code>~/.bash_profile</code> files , there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as Execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS"], "kill_chain_phases": [{"phase_name": "Persistence", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--01df3350-ce05-4bdf-bdf8-0a919a66d4a8", "name": ".bash_profile and .bashrc", "created": "2017-12-14T16:46:06.044Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "<code>~/.bash_profile</code> and <code>~/.bashrc</code> are executed in a user''s context when a new shell opens or when a user logs in so that their environment is set correctly. <code>~/.bash_profile</code> is executed for login shells and <code>~/.bashrc</code> is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), <code>~/.bash_profile</code> is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, <code>~/.bashrc</code> is executed. This allows users more fine grained control over when they want certain commands executed.\n\nMac''s Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling <code>~/.bash_profile</code> each time instead of <code>~/.bashrc</code>.\n\nThese files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain Persistence each time a user logs in or opens a new shell  (Citation: amnesia malware).", "x_mitre_permissions_required": ["User", "Administrator"]}');
INSERT INTO attack (id,json) VALUES (
'T1134','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1134", "source_name": "mitre-attack", "external_id": "T1134"}, {"url": "https://technet.microsoft.com/en-us/library/bb490994.aspx", "source_name": "Microsoft runas", "description": "Microsoft TechNet. (n.d.). Runas. Retrieved April 21, 2017."}, {"url": "https://www.offensive-security.com/metasploit-unleashed/fun-incognito/", "source_name": "Metasploit access token", "description": "Offensive Security. (n.d.). What is Incognito. Retrieved April 21, 2017."}, {"url": "https://msdn.microsoft.com/en-us/library/windows/desktop/aa378184(v=vs.85).aspx", "source_name": "Microsoft LogonUser", "description": "Microsoft TechNet. (n.d.). Retrieved April 25, 2017."}, {"url": "https://msdn.microsoft.com/en-us/library/windows/desktop/aa446617(v=vs.85).aspx", "source_name": "Microsoft DuplicateTokenEx", "description": "Microsoft TechNet. (n.d.). Retrieved April 25, 2017."}, {"url": "https://msdn.microsoft.com/en-us/library/windows/desktop/aa378612(v=vs.85).aspx", "source_name": "Microsoft ImpersonateLoggedOnUser", "description": "Microsoft TechNet. (n.d.). Retrieved April 25, 2017."}, {"url": "https://pentestlab.blog/2017/04/03/token-manipulation/", "source_name": "Pentestlab Token Manipulation", "description": "netbiosX. (2017, April 3). Token Manipulation. Retrieved April 21, 2017."}, {"url": "https://blog.cobaltstrike.com/2015/12/16/windows-access-tokens-and-alternate-credentials/", "source_name": "Cobalt Strike Access Token", "description": "Mudge, R. (n.d.). Windows Access Tokens and Alternate Credentials. Retrieved April 21, 2017."}, {"url": "https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing", "source_name": "Microsoft Command-line Logging", "description": "Mathers, B. (2017, March 7). Command line process auditing. Retrieved April 21, 2017."}, {"url": "https://www.blackhat.com/docs/eu-17/materials/eu-17-Atkinson-A-Process-Is-No-One-Hunting-For-Token-Manipulation.pdf", "source_name": "BlackHat Atkinson Winchester Token Manipulation", "description": "Atkinson, J., Winchester, R. (2017, December 7). A Process is No One: Hunting for Token Manipulation. Retrieved December 21, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_contributors": ["Tom Ueltschi @c_APT_ure", "Travis Smith, Tripwire", "Robby Winchester, @robwinchester3", "Jared Atkinson, @jaredcatkinson"], "x_mitre_permissions_required": ["User", "Administrator"], "x_mitre_data_sources": ["API monitoring", "Access tokens", "Process monitoring", "Process command-line parameters"], "modified": "2018-10-31T13:45:13.024Z", "x_mitre_detection": "If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows. (Citation: Microsoft Command-line Logging)\n\nIf an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior. \n\nThere are many Windows API calls a payload can take advantage of to manipulate access tokens (e.g., <code>LogonUser</code> (Citation: Microsoft LogonUser), <code>DuplicateTokenEx</code> (Citation: Microsoft DuplicateTokenEx), and <code>ImpersonateLoggedOnUser</code> (Citation: Microsoft ImpersonateLoggedOnUser)). Please see the referenced Windows API pages for more information.\n\nQuery systems for process and thread token information and look for inconsistencies such as user owns processes impersonating the local SYSTEM account. (Citation: BlackHat Atkinson Winchester Token Manipulation)", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Windows"], "kill_chain_phases": [{"phase_name": "Defense Evasion", "kill_chain_name": "mitre-attack"}, {"phase_name": "Privilege Escalation", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48", "name": "Access Token Manipulation", "created": "2017-12-14T16:46:06.044Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token. For example, Microsoft promotes the use of access tokens as a security best practice. Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command <code>runas</code>. (Citation: Microsoft runas)\n  \nAdversaries may use access tokens to operate under a different user or system security context to perform actions and evade detection. An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system. (Citation: Pentestlab Token Manipulation)\n\nAccess tokens can be leveraged by adversaries through three methods: (Citation: BlackHat Atkinson Winchester Token Manipulation)\n\n**Token Impersonation/Theft** - An adversary creates a new access token that duplicates an existing token using <code>DuplicateToken(Ex)</code>. The token can then be used with <code>ImpersonateLoggedOnUser</code> to allow the calling thread to impersonate a logged on user''s security context, or with <code>SetThreadToken</code> to assign the impersonated token to a thread. This is useful for when the target user has a non-network logon session on the system.\n\n**Create Process with a Token** - An adversary creates a new access token with <code>DuplicateToken(Ex)</code> and uses it with <code>CreateProcessWithTokenW</code> to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.\n\n**Make and Impersonate Token** - An adversary has a username and password but the user is not logged onto the system. The adversary can then create a logon session for the user using the <code>LogonUser</code> function. The function will return a copy of the new session''s access token and the adversary can use <code>SetThreadToken</code> to assign the token to a thread.\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account.\n\nMetasploit\u2019s Meterpreter payload allows arbitrary token manipulation and uses token impersonation to escalate privileges. (Citation: Metasploit access token)  The Cobalt Strike beacon payload allows arbitrary token impersonation and can also create tokens. (Citation: Cobalt Strike Access Token)", "x_mitre_effective_permissions": ["SYSTEM"]}');
INSERT INTO attack (id,json) VALUES (
'T1015','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1015", "source_name": "mitre-attack", "external_id": "T1015"}, {"url": "https://capec.mitre.org/data/definitions/558.html", "source_name": "capec", "external_id": "CAPEC-558"}, {"url": "http://blog.crowdstrike.com/registry-analysis-with-crowdresponse/", "source_name": "Tilbury 2014", "description": "Tilbury, C. (2014, August 28). Registry Analysis with CrowdResponse. Retrieved November 12, 2014."}, {"url": "https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-1.html", "source_name": "FireEye Hikit Rootkit", "description": "Glyer, C., Kazanciyan, R. (2012, August 20). THE \u201cHIKIT\u201d ROOTKIT: ADVANCED AND PERSISTENT ATTACK TECHNIQUES (PART 1). Retrieved June 6, 2016."}, {"url": "https://www.slideshare.net/DennisMaldonado5/sticky-keys-to-the-kingdom", "source_name": "DEFCON2016 Sticky Keys", "description": "Maldonado, D., McGuffin, T. (2016, August 6). Sticky Keys to the Kingdom. Retrieved July 5, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_contributors": ["Paul Speulstra, AECOM Global Security Operations Center"], "x_mitre_data_sources": ["Windows Registry", "File monitoring", "Process monitoring"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Changes to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc., are suspicious. Command line invocation of tools capable of modifying the Registry for associated keys are also suspicious. Utility arguments and the binaries themselves should be monitored for changes. Monitor Registry keys within <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options</code>.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Windows"], "kill_chain_phases": [{"phase_name": "Persistence", "kill_chain_name": "mitre-attack"}, {"phase_name": "Privilege Escalation", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--9b99b83a-1aac-4e29-b975-b374950551a3", "name": "Accessibility Features", "created": "2017-05-31T21:30:26.946Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)\n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways because of code integrity enhancements. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. Examples for both methods:\n\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1076) will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nFor the debugger method on Windows Vista and later as well as Windows Server 2008 and later, for example, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for the accessibility program (e.g., \"utilman.exe\"). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with RDP will cause the \"debugger\" program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nOther accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)\n\n* On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>\n* Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>\n* Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>\n* Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n* App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>", "x_mitre_effective_permissions": ["SYSTEM"], "x_mitre_permissions_required": ["Administrator"]}');
INSERT INTO attack (id,json) VALUES (
'T1087','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1087", "source_name": "mitre-attack", "external_id": "T1087"}, {"url": "https://capec.mitre.org/data/definitions/575.html", "source_name": "capec", "external_id": "CAPEC-575"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_contributors": ["Travis Smith, Tripwire"], "x_mitre_data_sources": ["API monitoring", "Process monitoring", "Process command-line parameters"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "System and network Discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1086).", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Discovery", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--72b74d71-8169-42aa-92e0-e7b04b9f5a08", "name": "Account Discovery", "created": "2017-05-31T21:31:06.988Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Adversaries may attempt to get a listing of local system or domain accounts. \n\n### Windows\n\nExample commands that can acquire this information are <code>net user</code>, <code>net group <groupname></code>, and <code>net localgroup <groupname></code> using the [Net](https://attack.mitre.org/software/S0039) utility or through use of [dsquery](https://attack.mitre.org/software/S0105). If adversaries attempt to identify the primary user, currently logged in user, or set of users that commonly uses a system, [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) may apply.\n\n### Mac\n\nOn Mac, groups can be enumerated through the <code>groups</code> and <code>id</code> commands. In mac specifically, <code>dscl . list /Groups</code> and <code>dscacheutil -q group</code> can also be used to enumerate groups and users.\n\n### Linux\n\nOn Linux, local users can be enumerated through the use of the <code>/etc/passwd</code> file which is world readable. In mac, this same file is only used in single-user mode in addition to the <code>/etc/master.passwd</code> file.\n\nAlso, groups can be enumerated through the <code>groups</code> and <code>id</code> commands.", "x_mitre_permissions_required": ["User"]}');
INSERT INTO attack (id,json) VALUES (
'T1098','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1098", "source_name": "mitre-attack", "external_id": "T1098"}, {"url": "https://docs.microsoft.com/windows/device-security/auditing/event-4738", "source_name": "Microsoft User Modified Event", "description": "Lich, B., Miroshnikov, A. (2017, April 5). 4738(S): A user account was changed. Retrieved June 30, 2017."}, {"url": "https://blog.stealthbits.com/manipulating-user-passwords-with-mimikatz-SetNTLM-ChangeNTLM", "source_name": "InsiderThreat ChangeNTLM July 2017", "description": "Warren, J. (2017, July 11). Manipulating User Passwords with Mimikatz. Retrieved December 4, 2017."}, {"url": "https://github.com/gentilkiwi/mimikatz/issues/92", "source_name": "GitHub Mimikatz Issue 92 June 2017", "description": "Warren, J. (2017, June 22). lsadump::changentlm and lsadump::setntlm work, but generate Windows events #92. Retrieved December 4, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_contributors": ["Tim MalcomVetter"], "x_mitre_data_sources": ["Authentication logs", "API monitoring", "Windows event logs", "Packet capture"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Collect events that correlate with changes to account objects on systems and the domain, such as event ID 4738. (Citation: Microsoft User Modified Event) Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems. Especially flag events where the subject and target accounts differ (Citation: InsiderThreat ChangeNTLM July 2017) or that include additional flags such as changing a password without knowledge of the old password. (Citation: GitHub Mimikatz Issue 92 June 2017)\n\nUse of credentials may also occur at unusual times or to unusual systems or services and may correlate with other suspicious activity.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Windows"], "kill_chain_phases": [{"phase_name": "Credential Access", "kill_chain_name": "mitre-attack"}, {"phase_name": "Persistence", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--a10641f4-87b4-45a3-a906-92a149cb2c27", "name": "Account Manipulation", "created": "2017-05-31T21:31:12.196Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Account manipulation may aid adversaries in maintaining access to credentials and certain permission levels within an environment. Manipulation could consist of modifying permissions, modifying credentials, adding or changing permission groups, modifying account settings, or modifying how authentication is performed. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to subvert password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.", "x_mitre_permissions_required": ["Administrator"]}');
INSERT INTO attack (id,json) VALUES (
'T1182','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1182", "source_name": "mitre-attack", "external_id": "T1182"}, {"url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process", "source_name": "Endgame Process Injection July 2017", "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017."}, {"url": "https://technet.microsoft.com/en-us/sysinternals/bb963902", "source_name": "TechNet Autoruns", "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016."}, {"url": "https://forum.sysinternals.com/appcertdlls_topic12546.html", "source_name": "Sysinternals AppCertDlls Oct 2007", "description": "Microsoft. (2007, October 24). Windows Sysinternals - AppCertDlls. Retrieved December 18, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["Loaded DLLs", "Process monitoring", "Windows Registry"], "modified": "2019-04-08T14:09:45.456Z", "x_mitre_detection": "Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx. (Citation: Endgame Process Injection July 2017) \n\nTools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location. (Citation: TechNet Autoruns) (Citation: Sysinternals AppCertDlls Oct 2007)\n\nLook for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Windows"], "kill_chain_phases": [{"phase_name": "Persistence", "kill_chain_name": "mitre-attack"}, {"phase_name": "Privilege Escalation", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--4bf5845d-a814-4490-bc5c-ccdee6043025", "name": "AppCert DLLs", "created": "2018-01-16T16:13:52.465Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. (Citation: Endgame Process Injection July 2017)\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055), this value can be abused to obtain Persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.", "x_mitre_effective_permissions": ["Administrator", "SYSTEM"], "x_mitre_permissions_required": ["Administrator", "SYSTEM"]}');
INSERT INTO attack (id,json) VALUES (
'T1103','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1103", "source_name": "mitre-attack", "external_id": "T1103"}, {"url": "https://support.microsoft.com/en-us/kb/197571", "source_name": "AppInit Registry", "description": "Microsoft. (2006, October). Working with the AppInit_DLLs registry value. Retrieved July 15, 2015."}, {"url": "https://msdn.microsoft.com/en-us/library/dn280412", "source_name": "AppInit Secure Boot", "description": "Microsoft. (n.d.). AppInit DLLs and Secure Boot. Retrieved July 15, 2015."}, {"url": "https://technet.microsoft.com/en-us/sysinternals/bb963902", "source_name": "TechNet Autoruns", "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016."}, {"url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process", "source_name": "Endgame Process Injection July 2017", "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_system_requirements": ["Secure boot disabled on systems running Windows 8 and later"], "x_mitre_permissions_required": ["Administrator"], "x_mitre_data_sources": ["Loaded DLLs", "Process monitoring", "Windows Registry"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Monitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process. Monitor the AppInit_DLLs Registry values for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx. (Citation: Endgame Process Injection July 2017) Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at Persistence, including listing current AppInit DLLs. (Citation: TechNet Autoruns) \n\nLook for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Windows"], "kill_chain_phases": [{"phase_name": "Persistence", "kill_chain_name": "mitre-attack"}, {"phase_name": "Privilege Escalation", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--317fefa6-46c7-4062-adb6-2008cf6bcb41", "name": "AppInit DLLs", "created": "2017-05-31T21:31:15.409Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> or <code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Endgame Process Injection July 2017) Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), these values can be abused to obtain Persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry)\n\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot)", "x_mitre_effective_permissions": ["Administrator", "SYSTEM"]}');
INSERT INTO attack (id,json) VALUES (
'T1155','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1155", "source_name": "mitre-attack", "external_id": "T1155"}, {"url": "https://securingtomorrow.mcafee.com/mcafee-labs/macro-malware-targets-macs/", "source_name": "Macro Malware Targets Macs", "description": "Yerko Grbic. (2017, February 14). Macro Malware Targets Macs. Retrieved July 8, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["API monitoring", "System calls", "Process monitoring", "Process command-line parameters"], "modified": "2019-02-11T15:34:01.392Z", "x_mitre_detection": "Monitor for Execution of AppleScript through osascript that may be related to other suspicious behavior occurring on the system.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["macOS"], "kill_chain_phases": [{"phase_name": "Execution", "kill_chain_name": "mitre-attack"}, {"phase_name": "Lateral Movement", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--5ad95aaa-49c1-4784-821d-2e83f47b079b", "name": "AppleScript", "created": "2017-12-14T16:46:06.044Z", "x_mitre_version": "1.0", "x_mitre_remote_support": true, "type": "attack-pattern", "description": "macOS and OS X applications send AppleEvent messages to each other for interprocess communications (IPC). These messages can be easily scripted with AppleScript for local or remote IPC. Osascript executes AppleScript and any other Open Scripting Architecture (OSA) language scripts. A list of OSA languages installed on a system can be found by using the <code>osalang</code> program.\nAppleEvent messages can be sent independently or as part of a script. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. \n\nAdversaries can use this to interact with open SSH connection, move to remote machines, and even present users with fake dialog boxes. These events cannot start applications remotely (they can start them locally though), but can interact with applications if they''re already running remotely. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via python  (Citation: Macro Malware Targets Macs). Scripts can be run from the command-line via <code>osascript /path/to/script</code> or <code>osascript -e \"script here\"</code>.", "x_mitre_permissions_required": ["User"]}');
INSERT INTO attack (id,json) VALUES (
'T1017','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1017", "source_name": "mitre-attack", "external_id": "T1017"}, {"url": "https://capec.mitre.org/data/definitions/187.html", "source_name": "capec", "external_id": "CAPEC-187"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_system_requirements": ["Access to application deployment software (EPO, HPCA, Altiris, etc.)"], "x_mitre_data_sources": ["File monitoring", "Process use of network", "Process monitoring"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Monitor application deployments from a secondary system. Perform application deployment at regular times so that irregular deployment activity stands out. Monitor process activity that does not correlate to known good software. Monitor account login activity on the deployment system.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Lateral Movement", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--327f3cc5-eea1-42d4-a6cd-ed34b7ce8f61", "name": "Application Deployment Software", "created": "2017-05-31T21:30:27.755Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Adversaries may deploy malicious software to systems within a network using application deployment systems employed by enterprise administrators. The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.\n\nAccess to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code Execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints."}');
INSERT INTO attack (id,json) VALUES (
'T1138','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1138", "source_name": "mitre-attack", "external_id": "T1138"}, {"url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process", "source_name": "Endgame Process Injection July 2017", "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017."}, {"url": "https://www.blackhat.com/docs/eu-15/materials/eu-15-Pierce-Defending-Against-Malicious-Application-Compatibility-Shims-wp.pdf", "source_name": "Black Hat 2015 App Shim", "description": "Pierce, Sean. (2015, November). Defending Against Malicious Application Compatibility Shims. Retrieved June 22, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["Loaded DLLs", "System calls", "Windows Registry", "Process monitoring", "Process command-line parameters"], "modified": "2019-04-03T15:00:20.430Z", "x_mitre_detection": "There are several public tools available that will detect shims that are currently available (Citation: Black Hat 2015 App Shim):\n\n* Shim-Process-Scanner - checks memory of every running process for any Shim flags\n* Shim-Detector-Lite - detects installation of custom shim databases\n* Shim-Guard - monitors registry for any shim installations\n* ShimScanner - forensic tool to find active shims in memory\n* ShimCacheMem - Volatility plug-in that pulls shim cache from memory (note: shims are only cached after reboot)\n\nMonitor process Execution for sdbinst.exe and command-line arguments for potential indications of application shim abuse.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Windows"], "kill_chain_phases": [{"phase_name": "Persistence", "kill_chain_name": "mitre-attack"}, {"phase_name": "Privilege Escalation", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--7c93aa74-4bc0-4a9e-90ea-f25f86301566", "name": "Application Shimming", "created": "2017-12-14T16:46:06.044Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Endgame Process Injection July 2017) Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses [Hooking](https://attack.mitre.org/techniques/T1179) to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code>\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code>\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088) (UAC) (RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress). Similar to [Hooking](https://attack.mitre.org/techniques/T1179), utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.", "x_mitre_permissions_required": ["Administrator"]}');
INSERT INTO attack (id,json) VALUES (
'T1010','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1010", "source_name": "mitre-attack", "external_id": "T1010"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["API monitoring", "Process monitoring", "Process command-line parameters"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "System and network Discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1086).", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Discovery", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--4ae4f953-fe58-4cc8-a327-33257e30a830", "name": "Application Window Discovery", "created": "2017-05-31T21:30:24.512Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.\n\nIn Mac, this can be done natively with a small [AppleScript](https://attack.mitre.org/techniques/T1155) script.", "x_mitre_permissions_required": ["User"]}');
INSERT INTO attack (id,json) VALUES (
'T1123','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1123", "source_name": "mitre-attack", "external_id": "T1123"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["API monitoring", "Process monitoring", "File monitoring"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.\n\nBehavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Collection", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--1035cdf2-3e5f-446f-a7a7-e8f6d7925967", "name": "Audio Capture", "created": "2017-05-31T21:31:34.528Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "An adversary can leverage a computer''s peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.", "x_mitre_permissions_required": ["User"]}');
INSERT INTO attack (id,json) VALUES (
'T1131','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1131", "source_name": "mitre-attack", "external_id": "T1131"}, {"url": "https://msdn.microsoft.com/library/windows/desktop/aa374733.aspx", "source_name": "MSDN Authentication Packages", "description": "Microsoft. (n.d.). Authentication Packages. Retrieved March 1, 2017."}, {"url": "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html", "source_name": "Graeber 2014", "description": "Graeber, M. (2014, October). Analysis of Malicious Security Support Provider DLLs. Retrieved March 1, 2017."}, {"url": "https://technet.microsoft.com/en-us/library/dn408187.aspx", "source_name": "Microsoft Configure LSA", "description": "Microsoft. (2013, July 31). Configuring Additional LSA Protection. Retrieved June 24, 2015."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["DLL monitoring", "Windows Registry", "Loaded DLLs"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Monitor the Registry for changes to the LSA Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe</code> with AuditLevel = 8. (Citation: Graeber 2014) (Citation: Microsoft Configure LSA)", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Windows"], "kill_chain_phases": [{"phase_name": "Persistence", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--52d40641-c480-4ad5-81a3-c80ccaddf82d", "name": "Authentication Package", "created": "2017-05-31T21:31:43.135Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Windows Authentication Package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. (Citation: MSDN Authentication Packages)\n\nAdversaries can use the autostart mechanism provided by LSA Authentication Packages for Persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code> with the key value of <code>\"Authentication Packages\"=<target binary></code>. The binary will then be executed by the system when the authentication packages are loaded.", "x_mitre_permissions_required": ["Administrator"]}');
INSERT INTO attack (id,json) VALUES (
'T1119','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1119", "source_name": "mitre-attack", "external_id": "T1119"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_system_requirements": ["Permissions to access directories and files that store information of interest."], "x_mitre_data_sources": ["File monitoring", "Data loss prevention", "Process command-line parameters"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Depending on the method used, actions could include common file system commands and parameters on the command-line interface within batch files or scripts. A sequence of actions like this may be unusual, depending on the system and network environment. Automated Collection may occur along with other techniques such as [Data Staged](https://attack.mitre.org/techniques/T1074). As such, file access monitoring that shows an unusual process performing sequential file opens and potentially copy actions to another location on the file system for many files at once may indicate automated Collection behavior. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1086).", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Collection", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--30208d3e-0d6b-43c8-883e-44462a514619", "name": "Automated Collection", "created": "2017-05-31T21:31:27.985Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of [Scripting](https://attack.mitre.org/techniques/T1064) to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) and [Remote File Copy](https://attack.mitre.org/techniques/T1105) to identify and move files.", "x_mitre_permissions_required": ["User"]}');
INSERT INTO attack (id,json) VALUES (
'T1020','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1020", "source_name": "mitre-attack", "external_id": "T1020"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_detection": "Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious.", "x_mitre_data_sources": ["File monitoring", "Process monitoring", "Process use of network"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_network_requirements": true, "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Exfiltration", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--774a3188-6ba9-4dc4-879d-d54ee48a5ce9", "name": "Automated Exfiltration", "created": "2017-05-31T21:30:29.458Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Data, such as sensitive documents, may be exfiltrated through the use of automated processing or [Scripting](https://attack.mitre.org/techniques/T1064) after being gathered during Collection. \n\nWhen automated Exfiltration is used, other Exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over Command and Control Channel](https://attack.mitre.org/techniques/T1041) and [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048)."}');
INSERT INTO attack (id,json) VALUES (
'T1197','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1197", "source_name": "mitre-attack", "external_id": "T1197"}, {"url": "https://technet.microsoft.com/library/dd939934.aspx", "source_name": "Microsoft Issues with BITS July 2011", "description": "Microsoft. (2011, July 19). Issues with BITS. Retrieved January 12, 2018."}, {"url": "https://msdn.microsoft.com/library/windows/desktop/bb968799.aspx", "source_name": "Microsoft BITS", "description": "Microsoft. (n.d.). Background Intelligent Transfer Service. Retrieved January 12, 2018."}, {"url": "https://msdn.microsoft.com/library/aa362813.aspx", "source_name": "Microsoft BITSAdmin", "description": "Microsoft. (n.d.). BITSAdmin Tool. Retrieved January 12, 2018."}, {"url": "https://www.secureworks.com/blog/malware-lingers-with-bits", "source_name": "CTU BITS Malware June 2016", "description": "Counter Threat Unit Research Team. (2016, June 6). Malware Lingers with BITS. Retrieved January 12, 2018."}, {"url": "https://arstechnica.com/information-technology/2007/05/malware-piggybacks-on-windows-background-intelligent-transfer-service/", "source_name": "Mondok Windows PiggyBack BITS May 2007", "description": "Mondok, M. (2007, May 11). Malware piggybacks on Windows\u2019 Background Intelligent Transfer Service. Retrieved January 12, 2018."}, {"url": "https://www.symantec.com/connect/blogs/malware-update-windows-update", "source_name": "Symantec BITS May 2007", "description": "Florio, E. (2007, May 9). Malware Update with Windows Update. Retrieved January 12, 2018."}, {"url": "https://msdn.microsoft.com/library/windows/desktop/ms680573.aspx", "source_name": "Microsoft COM", "description": "Microsoft. (n.d.). Component Object Model (COM). Retrieved November 22, 2017."}, {"url": "https://researchcenter.paloaltonetworks.com/2017/11/unit42-uboatrat-navigates-east-asia/", "source_name": "PaloAlto UBoatRAT Nov 2017", "description": "Hayashi, K. (2017, November 28). UBoatRAT Navigates East Asia. Retrieved January 12, 2018."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_contributors": ["Ricardo Dias", "Red Canary"], "x_mitre_data_sources": ["API monitoring", "Packet capture", "Windows event logs"], "modified": "2018-12-13T20:07:42.839Z", "x_mitre_detection": "BITS runs as a service and its status can be checked with the Sc query utility (<code>sc query bits</code>). (Citation: Microsoft Issues with BITS July 2011) Active BITS tasks can be enumerated using the [BITSAdmin](https://attack.mitre.org/software/S0190) tool (<code>bitsadmin /list /allusers /verbose</code>). (Citation: Microsoft BITS)\n\nMonitor usage of the [BITSAdmin](https://attack.mitre.org/software/S0190) tool (especially the \u2018Transfer\u2019, ''Create'', ''AddFile'', ''SetNotifyFlags'', ''SetNotifyCmdLine'', ''SetMinRetryDelay'', ''SetCustomHeaders'', and ''Resume'' command options)  (Citation: Microsoft BITS)Admin and the Windows Event log for BITS activity. Also consider investigating more detailed information about jobs by parsing the BITS job database. (Citation: CTU BITS Malware June 2016)\n\nMonitor and analyze network activity generated by BITS. BITS jobs use HTTP(S) and SMB for remote connections and are tethered to the creating user and will only function when that user is logged on (this rule applies even if a user attaches the job to a service account). (Citation: Microsoft BITS)", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Windows"], "kill_chain_phases": [{"phase_name": "Defense Evasion", "kill_chain_name": "mitre-attack"}, {"phase_name": "Persistence", "kill_chain_name": "mitre-attack"}], "x_mitre_defense_bypassed": ["Firewall", "Host forensic analysis"], "id": "attack-pattern--c8e87b83-edbb-48d4-9295-4974897525b7", "name": "BITS Jobs", "created": "2018-04-18T17:59:24.739Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). (Citation: Microsoft COM) (Citation: Microsoft BITS) BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.\n\nThe interface to create and manage BITS jobs is accessible through [PowerShell](https://attack.mitre.org/techniques/T1086)  (Citation: Microsoft BITS) and the [BITSAdmin](https://attack.mitre.org/software/S0190) tool. (Citation: Microsoft BITSAdmin)\n\nAdversaries may abuse BITS to download, execute, and even clean up after running malicious code. BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. (Citation: CTU BITS Malware June 2016) (Citation: Mondok Windows PiggyBack BITS May 2007) (Citation: Symantec BITS May 2007) BITS enabled Execution may also allow Persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots). (Citation: PaloAlto UBoatRAT Nov 2017) (Citation: CTU BITS Malware June 2016)\n\nBITS upload functionalities can also be used to perform [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048). (Citation: CTU BITS Malware June 2016)", "x_mitre_permissions_required": ["User", "Administrator", "SYSTEM"]}');
INSERT INTO attack (id,json) VALUES (
'T1139','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1139", "source_name": "mitre-attack", "external_id": "T1139"}, {"url": "http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way", "source_name": "External to DA, the OS X Way", "description": "Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to DA, the OS X Way. Retrieved July 3, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["File monitoring", "Process monitoring", "Process command-line parameters"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Monitoring when the user''s <code>.bash_history</code> is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like <code>cat ~/.bash_history</code>.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS"], "kill_chain_phases": [{"phase_name": "Credential Access", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--44dca04b-808d-46ca-b25f-d85236d4b9f8", "name": "Bash History", "created": "2017-12-14T16:46:06.044Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user\u2019s <code>.bash_history</code> file. For each user, this file resides at the same location: <code>~/.bash_history</code>. Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way)", "x_mitre_permissions_required": ["User"]}');
INSERT INTO attack (id,json) VALUES (
'T1009','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1009", "source_name": "mitre-attack", "external_id": "T1009"}, {"external_id": "CAPEC-572", "source_name": "capec", "url": "https://capec.mitre.org/data/definitions/572.html"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["Binary file metadata", "File monitoring", "Malware reverse engineering"], "modified": "2019-01-31T19:18:29.228Z", "x_mitre_detection": "Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool. \n\nWhen executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information Discovery or Lateral Movement, which could be used as event indicators that point to the source file.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Defense Evasion", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--519630c5-f03f-4882-825c-3af924935817", "name": "Binary Padding", "created": "2017-05-31T21:30:22.096Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Some security tools inspect files with static signatures to determine if they are known malicious. Adversaries may add data to files to increase the size beyond what security tools are capable of handling or to change the file hash to avoid hash-based blacklists.", "x_mitre_defense_bypassed": ["Signature-based detection", "Anti-virus"]}');
INSERT INTO attack (id,json) VALUES (
'T1067','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1067", "source_name": "mitre-attack", "external_id": "T1067"}, {"url": "http://www.symantec.com/connect/blogs/are-mbr-infections-back-fashion", "source_name": "Lau 2011", "description": "Lau, H. (2011, August 8). Are MBR Infections Back in Fashion? (Infographic). Retrieved November 13, 2014."}, {"url": "https://www.fireeye.com/content/dam/fireeye-www/regional/fr_FR/offers/pdfs/ig-mtrends-2016.pdf", "source_name": "MTrends 2016", "description": "Mandiant. (2016, February). M-Trends 2016. Retrieved January 4, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["API monitoring", "MBR", "VBR"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "Windows"], "kill_chain_phases": [{"phase_name": "Persistence", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--02fefddc-fb1b-423f-a76b-7552dd211d4d", "name": "Bootkit", "created": "2017-05-31T21:30:54.661Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: MTrends 2016)\n\nAdversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\n### Master Boot Record\nThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting Execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)\n\n### Volume Boot Record\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert Execution during startup to adversary code.", "x_mitre_permissions_required": ["Administrator", "SYSTEM"]}');
INSERT INTO attack (id,json) VALUES (
'T1217','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1217", "source_name": "mitre-attack", "external_id": "T1217"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_contributors": ["Mike Kemmerer"], "x_mitre_data_sources": ["API monitoring", "File monitoring", "Process command-line parameters", "Process monitoring"], "modified": "2018-10-31T13:45:13.024Z", "x_mitre_detection": "Monitor processes and command-line arguments for actions that could be taken to gather browser bookmark information. Remote access tools with built-in features may interact directly using APIs to gather information. Information may also be acquired through system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1086).\n\nSystem and network Discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "Windows", "macOS"], "kill_chain_phases": [{"phase_name": "Discovery", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--5e4a2073-9643-44cb-a0b5-e7f4048446c7", "name": "Browser Bookmark Discovery", "created": "2018-04-18T17:59:24.739Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.\n\nBrowser bookmarks may also highlight additional targets after an adversary has access to valid credentials, especially [Credentials in Files](https://attack.mitre.org/techniques/T1081) associated with logins cached by a browser.\n\nSpecific storage locations vary based on platform and/or application, but browser bookmarks are typically stored in local files/databases.", "x_mitre_permissions_required": ["User"]}');
INSERT INTO attack (id,json) VALUES (
'T1176','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1176", "source_name": "mitre-attack", "external_id": "T1176"}, {"url": "https://developer.chrome.com/extensions", "source_name": "Chrome Extensions Definition", "description": "Chrome. (n.d.). What are Extensions?. Retrieved November 16, 2017."}, {"url": "https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43824.pdf", "source_name": "Malicious Chrome Extension Numbers", "description": "Jagpal, N., et al. (2015, August). Trends and Lessons from Three Years Fighting Malicious Extensions. Retrieved November 17, 2017."}, {"url": "https://www.ghacks.net/2017/09/19/first-chrome-extension-with-javascript-crypto-miner-detected/", "source_name": "Chrome Extension Crypto Miner", "description": "Brinkmann, M. (2017, September 19). First Chrome extension with JavaScript Crypto Miner detected. Retrieved November 16, 2017."}, {"url": "https://isc.sans.edu/forums/diary/BankerGoogleChromeExtensiontargetingBrazil/22722/", "source_name": "Banker Google Chrome Extension Steals Creds", "description": "Marinho, R. (n.d.). (Banker(GoogleChromeExtension)).targeting. Retrieved November 18, 2017."}, {"url": "https://isc.sans.edu/forums/diary/CatchAll+Google+Chrome+Malicious+Extension+Steals+All+Posted+Data/22976/https:/threatpost.com/malicious-chrome-extension-steals-data-posted-to-any-website/128680/)", "source_name": "Catch All Chrome Extension", "description": "Marinho, R. (n.d.). \"Catch-All\" Google Chrome Malicious Extension Steals All Posted Data. Retrieved November 16, 2017."}, {"url": "https://kjaer.io/extension-malware/", "source_name": "Chrome Extension C2 Malware", "description": "Kjaer, M. (2016, July 18). Malware in the browser: how you might get hacked by a Chrome extension. Retrieved November 22, 2017."}, {"url": "https://www.welivesecurity.com/2017/07/20/stantinko-massive-adware-campaign-operating-covertly-since-2012/", "source_name": "Stantinko Botnet", "description": "Vachon, F., Faou, M. (2017, July 20). Stantinko: A massive adware campaign operating covertly since 2012. Retrieved November 16, 2017."}, {"url": "https://en.wikipedia.org/wiki/Browser_extension", "source_name": "Wikipedia Browser Extension", "description": "Wikipedia. (2017, October 8). Browser Extension. Retrieved January 11, 2018."}, {"url": "https://www.icebrg.io/blog/malicious-chrome-extensions-enable-criminals-to-Impact-over-half-a-million-users-and-global-businesses", "source_name": "ICEBRG Chrome Extensions", "description": "De Tore, M., Warner, J. (2018, January 15). MALICIOUS CHROME EXTENSIONS ENABLE CRIMINALS TO IMPACT OVER HALF A MILLION USERS AND GLOBAL BUSINESSES. Retrieved January 17, 2018."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_contributors": ["Justin Warner, ICEBRG"], "x_mitre_data_sources": ["Network protocol analysis", "Packet capture", "System calls", "Process use of network", "Process monitoring", "Browser extensions"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Inventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. However, this may prove to be a difficult way of initially detecting a malicious extension depending on the nature and volume of the traffic it generates.\n\nMonitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Persistence", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--389735f1-f21c-4208-b8f0-f8031e7169b8", "name": "Browser Extensions", "created": "2018-01-16T16:13:52.465Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Browser extensions or plugins are small programs that can add functionality and customize aspects of internet browsers. They can be installed directly or through a browser''s app store. Extensions generally have access and permissions to everything that the browser can access. (Citation: Wikipedia Browser Extension) (Citation: Chrome Extensions Definition)\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so may not be difficult for malicious extensions to defeat automated scanners and be uploaded. (Citation: Malicious Chrome Extension Numbers) Once the extension is installed, it can browse to websites in the background, (Citation: Chrome Extension Crypto Miner) (Citation: ICEBRG Chrome Extensions) steal all information that a user enters into a browser, to include credentials, (Citation: Banker Google Chrome Extension Steals Creds) (Citation: Catch All Chrome Extension) and be used as an installer for a RAT for Persistence. There have been instances of botnets using a persistent backdoor through malicious Chrome extensions. (Citation: Stantinko Botnet) There have also been similar examples of extensions being used for command & control  (Citation: Chrome Extension C2 Malware).", "x_mitre_permissions_required": ["User"]}');
INSERT INTO attack (id,json) VALUES (
'T1110','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1110", "source_name": "mitre-attack", "external_id": "T1110"}, {"url": "https://en.wikipedia.org/wiki/Password_cracking", "source_name": "Wikipedia Password cracking", "description": "Wikipedia. (n.d.). Password cracking. Retrieved December 23, 2015."}, {"url": "https://www.cylance.com/content/dam/cylance/pages/operation-cleaver/Cylance_Operation_Cleaver_Report.pdf", "source_name": "Cylance Cleaver", "description": "Cylance. (2014, December). Operation Cleaver. Retrieved September 14, 2017."}, {"url": "http://www.blackhillsinfosec.com/?p=4645", "source_name": "BlackHillsInfosec Password Spraying", "description": "Thyer, J. (2015, October 30). Password Spraying & Other Fun with RPCCLIENT. Retrieved April 25, 2017."}, {"url": "https://www.trimarcsecurity.com/single-post/2018/05/06/Trimarc-Research-Detecting-Password-Spraying-with-Security-Event-Auditing", "source_name": "Trimarc Detecting Password Spraying", "description": "Metcalf, S. (2018, May 6). Trimarc Research: Detecting Password Spraying with Security Event Auditing. Retrieved January 16, 2019."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_contributors": ["John Strand", "Ed Williams, Trustwave, SpiderLabs"], "x_mitre_data_sources": ["Authentication logs"], "modified": "2019-02-15T21:09:55.950Z", "x_mitre_detection": "It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network. \n\nMonitor authentication logs for system and application login failures of [Valid Accounts](https://attack.mitre.org/techniques/T1078). If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.\n\nAlso monitor for many failed authentication attempts across various accounts that may result from password spraying attempts.\n\nFor password spraying consider the following(Citation: Trimarc Detecting Password Spraying):\n\n* Domain Controllers: \"Audit Logon\" (Success & Failure) for event ID 4625.\n* Domain Controllers: \"Audit Kerberos Authentication Service\" (Success & Failure) for event ID 4771.\n* All systems: \"Audit Logon\" (Success & Failure) for event ID 4648.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Credential Access", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--a93494bb-4b80-4ea1-8695-3236a49916fd", "name": "Brute Force", "created": "2017-05-31T21:31:22.767Z", "x_mitre_version": "1.1", "type": "attack-pattern", "description": "Adversaries may use brute force techniques to attempt access to accounts when passwords are unknown or when password hashes are obtained.\n\n[Credential Dumping](https://attack.mitre.org/techniques/T1003) is used to obtain password hashes, this may only get an adversary so far when [Pass the Hash](https://attack.mitre.org/techniques/T1075) is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network. (Citation: Wikipedia Password cracking)\n\nAdversaries may attempt to brute force logins without knowledge of passwords or hashes during an operation either with zero knowledge or by attempting a list of known or possible passwords. This is a riskier option because it could cause numerous authentication failures and account lockouts, depending on the organization''s login failure policies. (Citation: Cylance Cleaver)\n\nA related technique called password spraying uses one password (e.g. ''Password01''), or a small list of passwords, that matches the complexity policy of the domain and may be a commonly used password. Logins are attempted with that password and many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. (Citation: BlackHillsInfosec Password Spraying)\n\nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.", "x_mitre_permissions_required": ["User"]}');
INSERT INTO attack (id,json) VALUES (
'T1088','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1088", "source_name": "mitre-attack", "external_id": "T1088"}, {"url": "http://www.pretentiousname.com/misc/win7_uac_whitelist2.html", "source_name": "Davidson Windows", "description": "Davidson, L. (n.d.). Windows 7 UAC whitelist. Retrieved November 12, 2014."}, {"url": "https://technet.microsoft.com/en-us/itpro/windows/keep-secure/how-user-account-control-works", "source_name": "TechNet How UAC Works", "description": "Lich, B. (2016, May 31). How User Account Control Works. Retrieved June 3, 2016."}, {"url": "http://pen-testing.sans.org/blog/pen-testing/2013/08/08/psexec-uac-bypass", "source_name": "SANS UAC Bypass", "description": "Medin, T. (2013, August 8). PsExec UAC Bypass. Retrieved June 3, 2016."}, {"url": "https://technet.microsoft.com/en-US/magazine/2009.07.uac.aspx", "source_name": "TechNet Inside UAC", "description": "Russinovich, M. (2009, July). User Account Control: Inside Windows 7 User Account Control. Retrieved July 26, 2016."}, {"url": "https://msdn.microsoft.com/en-us/library/ms679687.aspx", "source_name": "MSDN COM Elevation", "description": "Microsoft. (n.d.). The COM Elevation Moniker. Retrieved July 26, 2016."}, {"url": "https://github.com/hfiref0x/UACME", "source_name": "Github UACMe", "description": "UACME Project. (2016, June 16). UACMe. Retrieved July 26, 2016."}, {"url": "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/", "source_name": "enigma0x3 Fileless UAC Bypass", "description": "Nelson, M. (2016, August 15). \"Fileless\" UAC Bypass using eventvwr.exe and Registry Hijacking. Retrieved December 27, 2016."}, {"url": "https://blog.fortinet.com/2016/12/16/malicious-macro-bypasses-uac-to-elevate-privilege-for-fareit-malware", "source_name": "Fortinet Fareit", "description": "Salvio, J., Joven, R. (2016, December 16). Malicious Macro Bypasses UAC to Elevate Privilege for Fareit Malware. Retrieved December 27, 2016."}, {"url": "https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/", "source_name": "enigma0x3 sdclt app paths", "description": "Nelson, M. (2017, March 14). Bypassing UAC using App Paths. Retrieved May 25, 2017."}, {"url": "https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/", "source_name": "enigma0x3 sdclt bypass", "description": "Nelson, M. (2017, March 17). \"Fileless\" UAC Bypass Using sdclt.exe. Retrieved May 25, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_contributors": ["Stefan Kanthak", "Casey Smith"], "x_mitre_data_sources": ["System calls", "Process monitoring", "Authentication logs", "Process command-line parameters"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Monitor process API calls for behavior that may be indicative of [Process Injection](https://attack.mitre.org/techniques/T1055) and unusual loaded DLLs through [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038), which indicate attempts to gain access to higher privileged processes.\n\nSome UAC bypass methods rely on modifying specific, user-accessible Registry settings. For example:\n\n* The <code>eventvwr.exe</code> bypass uses the <code>[HKEY_CURRENT_USER]\\Software\\Classes\\mscfile\\shell\\open\\command</code> Registry key. (Citation: enigma0x3 Fileless UAC Bypass)\n* The <code>sdclt.exe</code> bypass uses the <code>[HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\control.exe</code> and <code>[HKEY_CURRENT_USER]\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand</code> Registry keys. (Citation: enigma0x3 sdclt app paths) (Citation: enigma0x3 sdclt bypass)\n\nAnalysts should monitor these Registry settings for unauthorized changes.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Windows"], "kill_chain_phases": [{"phase_name": "Defense Evasion", "kill_chain_name": "mitre-attack"}, {"phase_name": "Privilege Escalation", "kill_chain_name": "mitre-attack"}], "x_mitre_defense_bypassed": ["Windows User Account Control"], "id": "attack-pattern--ca1a3f50-5ebd-41f8-8320-2c7d6a6e88be", "name": "Bypass User Account Control", "created": "2017-05-31T21:31:07.462Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The Impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. (Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs are allowed to elevate privileges or execute some elevated COM objects without prompting the user through the UAC notification box. (Citation: TechNet Inside UAC) (Citation: MSDN COM Elevation) An example of this is use of rundll32.exe to load a specifically crafted DLL which loads an auto-elevated COM object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. (Citation: Davidson Windows) Adversaries can use these techniques to elevate privileges to administrator if the target process is unprotected.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACMe contains an extensive list of methods (Citation: Github UACMe) that have been discovered and implemented within UACMe, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script. (Citation: enigma0x3 Fileless UAC Bypass) (Citation: Fortinet Fareit)\n\nAnother bypass is possible through some Lateral Movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on lateral systems and default to high integrity. (Citation: SANS UAC Bypass)", "x_mitre_effective_permissions": ["Administrator"], "x_mitre_permissions_required": ["User", "Administrator"]}');
INSERT INTO attack (id,json) VALUES (
'T1191','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1191", "source_name": "mitre-attack", "external_id": "T1191"}, {"url": "https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2003/cc786431(v=ws.10)", "source_name": "Microsoft Connection Manager Oct 2009", "description": "Microsoft. (2009, October 8). How Connection Manager Works. Retrieved April 11, 2018."}, {"url": "https://twitter.com/ItsReallyNick/status/958789644165894146", "source_name": "Twitter CMSTP Usage Jan 2018", "description": "Carr, N. (2018, January 31). Here is some early bad cmstp.exe... Retrieved April 11, 2018."}, {"url": "https://msitpros.com/?p=3960", "source_name": "MSitPros CMSTP Aug 2017", "description": "Moe, O. (2017, August 15). Research on CMSTP.exe. Retrieved April 11, 2018."}, {"url": "https://twitter.com/NickTyrer/status/958450014111633408", "source_name": "Twitter CMSTP Jan 2018", "description": "Tyrer, N. (2018, January 30). CMSTP.exe - remote .sct Execution applocker bypass. Retrieved April 11, 2018."}, {"url": "https://github.com/api0cradle/UltimateAppLockerByPassList", "source_name": "GitHub Ultimate AppLocker Bypass List", "description": "Moe, O. (2018, March 1). Ultimate AppLocker Bypass List. Retrieved April 10, 2018."}, {"url": "http://www.endurant.io/cmstp/detecting-cmstp-enabled-code-Execution-and-uac-bypass-with-sysmon/", "source_name": "Endurant CMSTP July 2018", "description": "Seetharaman, N. (2018, July 7). Detecting CMSTP-Enabled Code Execution and UAC Bypass With Sysmon.. Retrieved August 6, 2018."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_contributors": ["Ye Yint Min Thu Htut, Offensive Security Team, DBS Bank", "Nik Seetharaman, Palantir"], "x_mitre_data_sources": ["Process monitoring", "Process command-line parameters", "Process use of network", "Windows event logs"], "modified": "2018-10-31T13:45:13.024Z", "x_mitre_detection": "Use process monitoring to detect and analyze the Execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity.\n\nSysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include: (Citation: Endurant CMSTP July 2018)\n\n* To detect loading and Execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external.\n* To detect [Bypass User Account Control](https://attack.mitre.org/techniques/T1088) via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Windows"], "kill_chain_phases": [{"phase_name": "Defense Evasion", "kill_chain_name": "mitre-attack"}, {"phase_name": "Execution", "kill_chain_name": "mitre-attack"}], "x_mitre_defense_bypassed": ["Application whitelisting", "Anti-virus"], "id": "attack-pattern--7d6f590f-544b-45b4-9a42-e0805f342af3", "name": "CMSTP", "created": "2018-04-18T17:59:24.739Z", "x_mitre_version": "1.0", "x_mitre_remote_support": false, "type": "attack-pattern", "description": "The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. (Citation: Microsoft Connection Manager Oct 2009) CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.\n\nAdversaries may supply CMSTP.exe with INF files infected with malicious commands. (Citation: Twitter CMSTP Usage Jan 2018) Similar to [Regsvr32](https://attack.mitre.org/techniques/T1117) / \u201dSquiblydoo\u201d, CMSTP.exe may be abused to load and execute DLLs (Citation: MSitPros CMSTP Aug 2017)  and/or COM scriptlets (SCT) from remote servers. (Citation: Twitter CMSTP Jan 2018) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018) This Execution may also bypass AppLocker and other whitelisting defenses since CMSTP.exe is a legitimate, signed Microsoft application.\n\nCMSTP.exe can also be abused to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088) and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. (Citation: MSitPros CMSTP Aug 2017) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018)", "x_mitre_permissions_required": ["User"]}');
INSERT INTO attack (id,json) VALUES (
'T1042','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1042", "source_name": "mitre-attack", "external_id": "T1042"}, {"url": "https://capec.mitre.org/data/definitions/556.html", "source_name": "capec", "external_id": "CAPEC-556"}, {"url": "http://msdn.microsoft.com/en-us/library/bb166549.aspx", "source_name": "Microsoft File Handlers", "description": "Microsoft. (n.d.). Specifying File Handlers for File Name Extensions. Retrieved November 13, 2014."}, {"url": "https://support.microsoft.com/en-us/help/18539/windows-7-change-default-programs", "source_name": "Microsoft Change Default Programs", "description": "Microsoft. (n.d.). Change which programs Windows 7 uses by default. Retrieved July 26, 2016."}, {"url": "https://docs.microsoft.com/windows-server/administration/windows-commands/assoc", "source_name": "Microsoft Assoc Oct 2017", "description": "Plett, C. et al.. (2017, October 15). assoc. Retrieved August 7, 2018."}, {"url": "https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/troj_fakeav.gzd", "source_name": "TrendMicro TROJ-FAKEAV OCT 2012", "description": "Sioting, S. (2012, October 8). TROJ_FAKEAV.GZD. Retrieved August 8, 2018."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_contributors": ["Stefan Kanthak", "Travis Smith, Tripwire"], "x_mitre_data_sources": ["Windows Registry", "Process monitoring", "Process command-line parameters"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Collect and analyze changes to Registry keys that associate file extensions to default applications for Execution and correlate with unknown process launch activity or unusual file types for that process. \n\nUser file association preferences are stored under <code> [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts</code> and override associations configured under <code>[HKEY_CLASSES_ROOT]</code>. Changes to a user''s preference will occur under this entry''s subkeys.\n\nAlso look for abnormal process call trees for Execution of other commands that could relate to Discovery actions or other techniques.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Windows"], "kill_chain_phases": [{"phase_name": "Persistence", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--68c96494-1a50-403e-8844-69a6af278c68", "name": "Change Default File Association", "created": "2017-05-31T21:30:42.222Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access (Citation: Microsoft Change Default Programs) (Citation: Microsoft File Handlers) or by administrators using the built-in assoc utility. (Citation: Microsoft Assoc Oct 2017) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n\nSystem file associations are listed under <code>HKEY_CLASSES_ROOT\\.[extension]</code>, for example <code>HKEY_CLASSES_ROOT\\.txt</code>. The entries point to a handler for that extension located at <code>HKEY_CLASSES_ROOT\\[handler]</code>. The various commands are then listed as subkeys underneath the shell key at <code>HKEY_CLASSES_ROOT\\[handler]\\shell\\[action]\\command</code>. For example:\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command</code>\n\nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands. (Citation: TrendMicro TROJ-FAKEAV OCT 2012)", "x_mitre_permissions_required": ["User", "Administrator", "SYSTEM"]}');
INSERT INTO attack (id,json) VALUES (
'T1146','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1146", "source_name": "mitre-attack", "external_id": "T1146"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_defense_bypassed": ["Log analysis", "Host forensic analysis"], "x_mitre_data_sources": ["Authentication logs", "File monitoring"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "User authentication, especially via remote terminal services like SSH, without new entries in that user''s <code>~/.bash_history</code> is suspicious. Additionally, the modification of the HISTFILE and HISTFILESIZE environment variables or the removal/clearing of the <code>~/.bash_history</code> file are indicators of suspicious activity.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS"], "kill_chain_phases": [{"phase_name": "Defense Evasion", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--d3046a90-580c-4004-8208-66915bc29830", "name": "Clear Command History", "created": "2017-12-14T16:46:06.044Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "macOS and Linux both keep track of the commands users type in their terminal so that users can easily remember what they''ve done. These logs can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user''s home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they''ve used before in different sessions. Since everything typed on the command-line is saved, passwords passed in on the command line are also saved. Adversaries can abuse this by searching these files for cleartext passwords. Additionally, adversaries can use a variety of methods to prevent their own commands from appear in these logs such as <code>unset HISTFILE</code>, <code>export HISTFILESIZE=0</code>, <code>history -c</code>, <code>rm ~/.bash_history</code>.", "x_mitre_permissions_required": ["User"]}');
INSERT INTO attack (id,json) VALUES (
'T1115','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1115", "source_name": "mitre-attack", "external_id": "T1115"}, {"url": "https://msdn.microsoft.com/en-us/library/ms649012", "source_name": "MSDN Clipboard", "description": "Microsoft. (n.d.). About the Clipboard. Retrieved March 29, 2016."}, {"url": "http://www.rvrsh3ll.net/blog/empyre/operating-with-empyre/", "source_name": "Operating with EmPyre", "description": "rvrsh3ll. (2016, May 18). Operating with EmPyre. Retrieved July 12, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["API monitoring"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Access to the clipboard is a legitimate function of many applications on a Windows system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "Windows", "macOS"], "kill_chain_phases": [{"phase_name": "Collection", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--30973a08-aed9-4edf-8604-9084ce1b5c4f", "name": "Clipboard Data", "created": "2017-05-31T21:31:25.967Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Adversaries may collect data stored in the Windows clipboard from users copying information within or between applications. \n\n### Windows\n\nApplications can access clipboard data by using the Windows API. (Citation: MSDN Clipboard) \n\n### Mac\n\nOSX provides a native command, <code>pbpaste</code>, to grab clipboard contents  (Citation: Operating with EmPyre)."}');
INSERT INTO attack (id,json) VALUES (
'T1116','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1116", "source_name": "mitre-attack", "external_id": "T1116"}, {"url": "https://en.wikipedia.org/wiki/Code_signing", "source_name": "Wikipedia Code Signing", "description": "Wikipedia. (2015, November 10). Code Signing. Retrieved March 31, 2016."}, {"url": "https://securelist.com/why-you-shouldnt-completely-trust-files-signed-with-digital-certificates/68593/", "source_name": "Securelist Digital Certificates", "description": "Ladikov, A. (2015, January 29). Why You Shouldn\u2019t Completely Trust Files Signed with Digital Certificates. Retrieved March 31, 2016."}, {"url": "http://www.symantec.com/connect/blogs/how-attackers-steal-private-keys-digital-certificates", "source_name": "Symantec Digital Certificates", "description": "Shinotsuka, H. (2013, February 22). How Attackers Steal Private Keys from Digital Certificates. Retrieved March 31, 2016."}, {"url": "http://www.thesafemac.com/new-signed-malware-called-janicab/", "source_name": "Janicab", "description": "Thomas. (2013, July 15). New signed malware called Janicab. Retrieved July 17, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["Binary file metadata"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Defense Evasion", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--1b84d551-6de8-4b96-9930-d177677c3b1d", "name": "Code Signing", "created": "2017-05-31T21:31:26.474Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. (Citation: Wikipedia Code Signing) However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries (Citation: Janicab). The certificates used during an operation may be created, forged, or stolen by the adversary. (Citation: Securelist Digital Certificates) (Citation: Symantec Digital Certificates)\n\nCode signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform. (Citation: Wikipedia Code Signing)\n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.", "x_mitre_defense_bypassed": ["Windows User Account Control"]}');
INSERT INTO attack (id,json) VALUES (
'T1059','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1059", "source_name": "mitre-attack", "external_id": "T1059"}, {"url": "https://en.wikipedia.org/wiki/Command-line_interface", "source_name": "Wikipedia Command-Line Interface", "description": "Wikipedia. (2016, June 26). Command-line interface. Retrieved June 27, 2016."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["Process monitoring", "Process command-line parameters"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_detection": "Command-line interface activities can be captured through proper logging of process Execution with command-line arguments. This information can be useful in gaining additional insight to adversaries'' actions through how they use native processes or custom tools.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Execution", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830", "name": "Command-Line Interface", "created": "2017-05-31T21:30:49.546Z", "x_mitre_version": "1.0", "x_mitre_remote_support": false, "type": "attack-pattern", "description": "Command-line interfaces provide a way of interacting with computer systems and is a common feature across many types of operating system platforms. (Citation: Wikipedia Command-Line Interface) One example command-line interface on Windows systems is [cmd](https://attack.mitre.org/software/S0106), which can be used to perform a number of tasks including Execution of other software. Command-line interfaces can be interacted with locally or remotely via a remote desktop application, reverse shell session, etc. Commands that are executed run with the current permission level of the command-line interface process unless the command includes process invocation that changes permissions context for that Execution (e.g. [Scheduled Task](https://attack.mitre.org/techniques/T1053)).\n\nAdversaries may use command-line interfaces to interact with systems and execute other software during the course of an operation.", "x_mitre_permissions_required": ["User", "Administrator", "SYSTEM"]}');
INSERT INTO attack (id,json) VALUES (
'T1043','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1043", "source_name": "mitre-attack", "external_id": "T1043"}, {"url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf", "source_name": "University of Birmingham C2", "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)", "x_mitre_data_sources": ["Packet capture", "Netflow/Enclave netflow", "Process use of network", "Process monitoring"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_network_requirements": true, "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Command and Control", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--f879d51c-5476-431c-aedf-f14d207e4d1e", "name": "Commonly Used Port", "created": "2017-05-31T21:30:42.657Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as\n\n* TCP:80 (HTTP)\n* TCP:443 (HTTPS)\n* TCP:25 (SMTP)\n* TCP/UDP:53 (DNS)\n\nThey may use the protocol associated with the port or a completely different protocol. \n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are \n\n* TCP/UDP:135 (RPC)\n* TCP/UDP:22 (SSH)\n* TCP/UDP:3389 (RDP)"}');
INSERT INTO attack (id,json) VALUES (
'T1092','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1092", "source_name": "mitre-attack", "external_id": "T1092"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_detection": "Monitor file access on removable media. Detect processes that execute when removable media is mounted.", "x_mitre_data_sources": ["File monitoring", "Data loss prevention"], "modified": "2018-10-17T00:14:20.652Z", "x_mitre_network_requirements": false, "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Command and Control", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--64196062-5210-42c3-9a02-563a0d1797ef", "name": "Communication Through Removable Media", "created": "2017-05-31T21:31:09.379Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by [Replication Through Removable Media](https://attack.mitre.org/techniques/T1091). Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access."}');
INSERT INTO attack (id,json) VALUES (
'T1500','{"external_references": [{"external_id": "T1500", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1500"}, {"url": "https://www.clearskysec.com/wp-content/uploads/2018/11/MuddyWater-Operations-in-Lebanon-and-Oman.pdf", "source_name": "ClearSky MuddyWater Nov 2018", "description": "ClearSky Cyber Security. (2018, November). MuddyWater Operations in Lebanon and Oman: Using an Israeli compromised domain for a two-stage campaign. Retrieved November 29, 2018."}, {"url": "https://blog.trendmicro.com/trendlabs-security-intelligence/windows-app-runs-on-mac-downloads-info-stealer-and-adware/", "source_name": "TrendMicro WindowsAppMac", "description": "Trend Micro. (2019, February 11). Windows App Runs on Mac, Downloads Info Stealer and Adware. Retrieved April 25, 2019."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "type": "attack-pattern", "x_mitre_contributors": ["Ye Yint Min Thu Htut, Offensive Security Team, DBS Bank", "Praetorian"], "x_mitre_permissions_required": ["User"], "x_mitre_data_sources": ["Process command-line parameters", "Process monitoring", "File monitoring"], "modified": "2019-04-29T21:13:49.686Z", "x_mitre_detection": "Monitor the Execution file paths and command-line arguments for common compilers, such as csc.exe and GCC/MinGW, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior. The compilation of payloads may also generate file creation and/or file write events. Look for non-native binary formats and cross-platform compiler and Execution frameworks like Mono and determine if they have a legitimate purpose on the system.(Citation: TrendMicro WindowsAppMac) Typically these should only be used in specific and limited cases, like for software development.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Defense Evasion", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--cf7b3a06-8b42-4c33-bbe9-012120027925", "name": "Compile After Delivery", "created": "2019-04-25T20:53:07.719Z", "x_mitre_version": "1.0", "x_mitre_system_requirements": ["Compiler software (either native to the system or delivered by the adversary)"], "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Similar to [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027), text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before Execution; typically via native utilities such as csc.exe or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)\n\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193). Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and Execution framework.(Citation: TrendMicro WindowsAppMac)\n", "x_mitre_defense_bypassed": ["Static File Analysis", "Binary Analysis", "Anti-virus", "Host intrusion prevention systems", "Signature-based detection"]}');
INSERT INTO attack (id,json) VALUES (
'T1488','{"external_references": [{"external_id": "T1488", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1488"}, {"url": "https://www.operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Report.pdf", "source_name": "Novetta Blockbuster", "description": "Novetta Threat Research Group. (2016, February 24). Operation Blockbuster: Unraveling the Long Thread of the Sony Attack. Retrieved February 25, 2016."}, {"url": "https://operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Destructive-Malware-Report.pdf", "source_name": "Novetta Blockbuster Destructive Malware", "description": "Novetta Threat Research Group. (2016, February 24). Operation Blockbuster: Destructive Malware Report. Retrieved March 2, 2016."}, {"url": "https://www.justice.gov/opa/press-release/file/1092091/download", "source_name": "DOJ Lazarus Sony 2018", "description": "Department of Justice. (2018, September 6). Criminal Complaint - United States of America v. PARK JIN HYOK. Retrieved March 29, 2019."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["Kernel drivers", "Process monitoring", "Process command-line parameters"], "modified": "2019-04-29T13:48:11.744Z", "x_mitre_detection": "Look for attempts to read/write to sensitive locations like the partition boot sector or BIOS parameter block/superblock. Monitor for unusual kernel driver installation activity.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Impact", "kill_chain_name": "mitre-attack"}], "x_mitre_impact_type": ["Availability"], "id": "attack-pattern--b82f7d37-b826-4ec9-9391-8e121c78aed7", "name": "Disk Content Wipe", "created": "2019-03-29T14:59:50.763Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Adversaries may erase the contents of storage devices on specific systems as well as large numbers of systems in a network to interrupt availability to system and network resources.\n\nAdversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware)(Citation: DOJ Lazarus Sony 2018) Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.(Citation: Novetta Blockbuster Destructive Malware) Adversaries have been observed leveraging third-party drivers like [RawDisk](https://attack.mitre.org/software/S0364) to directly access disk content.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware) This behavior is distinct from [Data Destruction](https://attack.mitre.org/techniques/T1485) because sections of the disk erased instead of individual files.\n\nTo maximize Impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [Credential Dumping](https://attack.mitre.org/techniques/T1003), and [Windows Admin Shares](https://attack.mitre.org/techniques/T1077).(Citation: Novetta Blockbuster Destructive Malware)", "x_mitre_permissions_required": ["User", "Administrator", "root", "SYSTEM"]}');
INSERT INTO attack (id,json) VALUES (
'T1055','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1055", "source_name": "mitre-attack", "external_id": "T1055"}, {"url": "https://capec.mitre.org/data/definitions/242.html", "source_name": "capec", "external_id": "CAPEC-242"}, {"url": "https://github.com/mattifestation/PowerSploit", "source_name": "Powersploit", "description": "PowerSploit. (n.d.). Retrieved December 4, 2014."}, {"url": "https://www.endgame.com/blog/technical-blog/hunting-memory", "source_name": "Endgame HuntingNMemory June 2017", "description": "Desimone, J. (2017, June 13). Hunting in Memory. Retrieved December 7, 2017."}, {"url": "https://msdn.microsoft.com/library/windows/desktop/ms681951.aspx", "source_name": "Microsoft APC", "description": "Microsoft. (n.d.). Asynchronous Procedure Calls. Retrieved December 8, 2017."}, {"url": "https://blog.ensilo.com/atombombing-brand-new-code-injection-for-windows", "source_name": "ENSIL AtomBombing Oct 2016", "description": "Liberman, T. (2016, October 27). ATOMBOMBING: BRAND NEW CODE INJECTION FOR WINDOWS. Retrieved December 8, 2017."}, {"url": "https://msdn.microsoft.com/library/windows/desktop/ms649053.aspx", "source_name": "Microsoft Atom Table", "description": "Microsoft. (n.d.). About Atom Tables. Retrieved December 8, 2017."}, {"url": "https://docs.microsoft.com/sysinternals/downloads/sysmon", "source_name": "Microsoft Sysmon v6 May 2017", "description": "Russinovich, M. & Garnier, T. (2017, May 22). Sysmon v6.20. Retrieved December 13, 2017."}, {"url": "https://www.fireeye.com/blog/threat-research/2017/11/ursnif-variant-malicious-tls-callback-technique.html", "source_name": "FireEye TLS Nov 2017", "description": "Vaish, A. & Nemes, S. (2017, November 28). Newly Observed Ursnif Variant Employs Malicious TLS Callback Technique to Achieve Process Injection. Retrieved December 18, 2017."}, {"url": "https://www.datawire.io/code-injection-on-linux-and-macos/", "source_name": "Datawire Code Injection", "description": "Turner-Trauring, I. (2017, April 18). \u201cThis will only hurt for a moment\u201d: code injection on Linux and macOS with LD_PRELOAD. Retrieved December 20, 2017."}, {"url": "http://hick.org/code/skape/papers/needle.txt", "source_name": "Uninformed Needle", "description": "skape. (2003, January 19). Linux x86 run-time process manipulation. Retrieved December 20, 2017."}, {"url": "http://phrack.org/issues/51/8.html", "source_name": "Phrack halfdead 1997", "description": "halflife. (1997, September 1). Shared Library Redirection Techniques. Retrieved December 20, 2017."}, {"url": "http://vxer.org/lib/vrn00.html", "source_name": "VDSO hijack 2009", "description": "O''Neill, R. (2009, May). Modern Day ELF Runtime infection via GOT poisoning. Retrieved December 20, 2017."}, {"source_name": "ArtOfMemoryForensics", "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017."}, {"url": "https://www.gnu.org/software/acct/", "source_name": "GNU Acct", "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017."}, {"url": "https://access.redhat.com/documentation/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing", "source_name": "RHEL auditd", "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017."}, {"url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html", "source_name": "Chokepoint preload rootkits", "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017."}, {"url": "https://www.cyberbit.com/blog/endpoint-security/new-early-bird-code-injection-technique-discovered/", "source_name": "CyberBit Early Bird Apr 2018", "description": "Gavriel, H. & Erbesfeld, B. (2018, April 11). New \u2018Early Bird\u2019 Code Injection Technique Discovered. Retrieved May 24, 2018."}, {"url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process", "source_name": "Endgame Process Injection July 2017", "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017."}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_contributors": ["Anastasios Pingios", "Christiaan Beek, @ChristiaanBeek", "Ryan Becwar"], "x_mitre_data_sources": ["API monitoring", "Windows Registry", "File monitoring", "DLL monitoring", "Process monitoring", "Named Pipes"], "modified": "2018-10-31T13:45:13.024Z", "x_mitre_detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as WriteProcessMemory, may be used for this technique. (Citation: Endgame Process Injection July 2017)\n\nMonitoring for Linux specific calls such as the ptrace system call, the use of LD_PRELOAD environment variable, or dlfcn dynamic linking API calls, should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods. (Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits)\n\nMonitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. (Citation: Microsoft Sysmon v6 May 2017)\n\nMonitor processes and command-line arguments for actions that could be done before or after code injection has occurred and correlate the information with related event information. Code injection may also be performed using [PowerShell](https://attack.mitre.org/techniques/T1086) with tools such as PowerSploit, (Citation: Powersploit) so additional PowerShell monitoring may be required to cover known implementations of this behavior.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "kill_chain_phases": [{"phase_name": "Defense Evasion", "kill_chain_name": "mitre-attack"}, {"phase_name": "Privilege Escalation", "kill_chain_name": "mitre-attack"}], "x_mitre_defense_bypassed": ["Process whitelisting", "Anti-virus"], "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d", "name": "Process Injection", "created": "2017-05-31T21:30:47.843Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process''s memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the Execution is masked under a legitimate process.\n\n### Windows\n\nThere are multiple approaches to injecting code into a live process. Windows implementations include: (Citation: Endgame Process Injection July 2017)\n\n* **Dynamic-link library (DLL) injection** involves writing the path to a malicious DLL inside a process then invoking Execution by creating a remote thread.\n* **Portable executable injection** involves writing malicious code directly into the process (without a file on disk) then invoking Execution with either additional code or by creating a remote thread. The displacement of the injected code introduces the additional requirement for functionality to remap memory references. Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue. (Citation: Endgame HuntingNMemory June 2017)\n* **Thread Execution hijacking** involves injecting malicious code or the path to a DLL into a thread of a process. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1093), the thread must first be suspended.\n* **Asynchronous Procedure Call** (APC) injection involves attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process''s thread. Queued APC functions are executed when the thread enters an alterable state. A variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process'' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018)  AtomBombing  (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table. (Citation: Microsoft Atom Table)\n* **Thread Local Storage** (TLS) callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code''s legitimate entry point. (Citation: FireEye TLS Nov 2017)\n\n### Mac and Linux\n\nImplementations for Linux and OS X/macOS systems include: (Citation: Datawire Code Injection) (Citation: Uninformed Needle)\n\n* **LD_PRELOAD, LD_LIBRARY_PATH** (Linux), **DYLD_INSERT_LIBRARIES** (Mac OS X) environment variables, or the dlfcn application programming interface (API) can be used to dynamically load a library (shared object) in a process which can be used to intercept API calls from the running process. (Citation: Phrack halfdead 1997)\n* **Ptrace system calls** can be used to attach to a running process and modify it in runtime. (Citation: Uninformed Needle)\n* **/proc/[pid]/mem** provides access to the memory of the process and can be used to read/write arbitrary data to it. This technique is very rare due to its complexity. (Citation: Uninformed Needle)\n* **VDSO hijacking** performs runtime injection on ELF binaries by manipulating code stubs mapped in from the linux-vdso.so shared object. (Citation: VDSO hijack 2009)\n\nMalware commonly utilizes process injection to access system resources through which Persistence and other environment modifications can be made. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.", "x_mitre_effective_permissions": ["User", "Administrator", "SYSTEM", "root"], "x_mitre_permissions_required": ["User", "Administrator", "SYSTEM", "root"]}');
INSERT INTO attack (id,json) VALUES (
'T1199','{"external_references": [{"url": "https://attack.mitre.org/techniques/T1199", "source_name": "mitre-attack", "external_id": "T1199"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_data_sources": ["Application logs", "Authentication logs", "Third-party application logs"], "modified": "2018-10-31T13:45:13.024Z", "x_mitre_detection": "Establish monitoring for activity conducted by second and third party providers and other trusted entities that may be leveraged as a means to gain access to the network. Depending on the type of relationship, an adversary may have access to significant amounts of information about the target before conducting an operation, especially if the trusted relationship is based on IT services. Adversaries may be able to act quickly towards an objective, so proper monitoring for behavior related to Credential Access, Lateral Movement, and Collection will be important to detect the intrusion.", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "Windows", "macOS"], "kill_chain_phases": [{"phase_name": "Initial Access", "kill_chain_name": "mitre-attack"}], "id": "attack-pattern--9fa07bef-9c81-421e-a8e5-ad4366c5a925", "name": "Trusted Relationship", "created": "2018-04-18T17:59:24.739Z", "x_mitre_version": "1.0", "type": "attack-pattern", "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider''s access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, [Valid Accounts](https://attack.mitre.org/techniques/T1078) used by the other party for access to internal network systems may be compromised and used."}');

INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1156','Persistence');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1134','Defense Evasion');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1134','Privilege Escalation');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1015','Persistence');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1015','Privilege Escalation');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1087','Discovery');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1098','Credential Access');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1098','Persistence');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1182','Persistence');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1182','Privilege Escalation');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1103','Persistence');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1103','Privilege Escalation');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1155','Execution');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1155','Lateral Movement');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1017','Lateral Movement');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1138','Persistence');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1138','Privilege Escalation');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1010','Discovery');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1123','Collection');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1131','Persistence');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1119','Collection');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1020','Exfiltration');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1197','Defense Evasion');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1197','Persistence');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1139','Credential Access');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1009','Defense Evasion');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1067','Persistence');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1217','Discovery');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1176','Persistence');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1110','Credential Access');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1088','Defense Evasion');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1088','Privilege Escalation');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1191','Defense Evasion');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1191','Execution');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1042','Persistence');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1146','Defense Evasion');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1115','Collection');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1116','Defense Evasion');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1059','Execution');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1043','Command and Control');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1092','Command and Control');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1500','Defense Evasion');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1488','Impact');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1055','Privilege Escalation');
INSERT INTO has_phase (attack_id,phase_name) VALUES (
'T1199','Initial Access');

INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1156','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1156','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1134','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1015','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1087','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1087','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1087','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1098','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1182','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1103','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1155','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1017','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1017','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1017','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1138','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1010','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1010','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1123','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1123','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1123','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1131','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1119','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1119','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1119','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1020','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1020','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1020','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1197','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1139','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1139','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1009','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1009','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1009','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1067','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1067','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1217','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1217','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1217','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1176','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1176','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1176','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1110','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1110','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1110','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1088','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1191','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1042','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1146','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1146','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1115','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1115','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1115','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1116','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1116','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1059','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1059','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1059','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1043','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1043','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1043','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1092','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1092','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1092','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1500','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1500','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1500','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1488','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1488','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1488','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1055','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1055','macOS');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1055','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1199','Linux');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1199','Windows');
INSERT INTO has_platform (attack_id,platform_name) VALUES (
'T1199','macOS');