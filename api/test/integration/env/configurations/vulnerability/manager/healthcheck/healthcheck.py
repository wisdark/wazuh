import socket
import sys
from os import system

sys.path.append('/tools')

from healthcheck_utils import get_manager_health_base, get_login_header, check, get_response, base_url, login_url

# Configuration
user = 'wazuh'
password = 'wazuh'
headers = get_login_header(user, password)
agents_to_check = ['001', '002']


# Functions
def get_agents_node(status='active'):
    """Get to which manager each agent reports.

    Parameters
    ----------
    status : str
        Status to filter agents by.

    Returns
    -------
    dict, None
        Dictionary like {agent_id: manager_name} if agents were obtained, else None.
    """
    try:
        headers['Authorization'] = f'Bearer {get_response(login_url, headers)["data"]["token"]}'
        response = get_response(base_url + f'/agents?select=id,manager&status={status}',
                                headers)['data']['affected_items']
    except Exception:
        return

    return {item['id']: item['manager'] for item in response}


if __name__ == '__main__':
    # Get dict of agent IDs and the manager they report to.
    agents_node = get_agents_node()

    # If not all requested agents were returned, exit with error code
    if agents_node is None or not all(agent in agents_node for agent in agents_to_check):
        exit(1)

    checks_list = list()
    expected_log = "grep -q 'wazuh-modulesd:vulnerability-detector: INFO: (5471): Finished vulnerability assessment " \
                   "for agent '\\''{}'\\''' /var/ossec/logs/ossec.log"

    if socket.gethostname() == 'wazuh-master':
        checks_list.append(get_manager_health_base())

    for agent in agents_to_check:
        if agents_node[agent] == socket.gethostname():
            # Append only logs that are expected in the current node.
            checks_list.append(check(system(expected_log.format(agent))))

    exit(any(checks_list))
