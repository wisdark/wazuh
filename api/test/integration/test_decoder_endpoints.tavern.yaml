---
test_name: GET /decoders

marks:
  - base_tests

stages:

    # GET /decoders
  - name: Try to get all decoders
    request: &get_decoders
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/decoders"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: !anything
          total_affected_items: !anyint

    # GET /decoders?limit=1
  - name: Try to get decoders using limit parameter
    request:
      verify: False
      <<: *get_decoders
      params:
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: &full_items_array
            - details: !anything
              filename: !anystr
              name: !anystr
              relative_dirname: !anystr
              position: !anyint
              status: !anystr
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint
      # Save some data for future use in the test
      save:
        json:
          returned_filename: data.affected_items[0].filename
          returned_relative_path: data.affected_items[0].relative_dirname
          returned_status: data.affected_items[0].status
          returned_name: data.affected_items[0].name

    # We implement a dual stage to check offset parameter behaviour
    # GET /decoders?limit=2&offset=0
  - name: Try to get decoders using limit and offset parameter
    request:
      verify: False
      <<: *get_decoders
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *full_items_array
            - <<: *full_items_array
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint
      # Save second item to check offset in next stage
      save:
        json:
          offset_item: data.affected_items[1]

    # GET /decoders?limit=1&offset=1
  - name: Try to get decoders using limit and offset parameter
    request:
      verify: False
      <<: *get_decoders
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
              # Check offset matches with previous request
            - details: !anything
              filename: "{offset_item.filename}"
              name: "{offset_item.name}"
              relative_dirname: "{offset_item.relative_dirname}"
              position: !int "{offset_item.position}"
              status: "{offset_item.status}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # GET /decoders?limit=1&search=a
  - name: Try to get decoders using limit and search parameter
    request:
      verify: False
      <<: *get_decoders
      params:
        limit: 1
        search: a
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *full_items_array
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # GET /decoders?limit=1&filename={returned_file}
  - name: Try to get decoders using limit and filename parameter
    request:
      verify: False
      <<: *get_decoders
      params:
        limit: 1
        filename: "{returned_filename:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - filename: "{tavern.request_vars.params.filename}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # GET /decoders?limit=1&relative_dirname={returned_relative_path}
  - name: Try to get decoders using limit and path parameter
    request:
      verify: False
      <<: *get_decoders
      params:
        limit: 1
        relative_dirname: "{returned_relative_path:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - relative_dirname: "{tavern.request_vars.params.relative_dirname}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # GET /decoders?limit=1&status={returned_status}
  - name: Try to get decoders using limit and status parameter
    request:
      verify: False
      <<: *get_decoders
      params:
        limit: 1
        status: "{returned_status:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - status: "{tavern.request_vars.params.status}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # We perform a dual stage to test request using a wrong parameter and a wrong parameter value
    # GET /decoders?limit=1&wrongparam=wrong
  - name: Try to get decoders using limit and a wrong parameter
    request:
      verify: False
      <<: *get_decoders
      params:
        limit: 1
        wrongparam: "wrong"
    response:
      status_code: 400

    # GET /decoders?limit=1&sort=wrong
  - name: Try to get decoders using limit and a wrong parameter's value
    request:
      verify: False
      <<: *get_decoders
      params:
        limit: 1
        sort: "wrong"
    response:
      status_code: 400
      json:
        error: 1403

  - name: Show decoders using valid select
    request:
      verify: False
      <<: *get_decoders
      params:
        # Single and nested select
        select: 'name,details.parent'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'filename,position,name,details.parent' # required_fields={'filename', 'position'}
      status_code: 200
      json:
        error: !anyint
        data:
          total_affected_items: !anyint
          failed_items: []
          total_failed_items: 0

  - name: Show decoders using invalid select
    request:
      verify: False
      <<: *get_decoders
      params:
        select: 'noexists'
    response:
      status_code: 400
      json: &invalid_select
        error: 1724

  - name: Show decoders using select (one select is invalid)
    request:
      verify: False
      <<: *get_decoders
      params:
        select: 'filename,noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Show lists using select and specifying a non-existent file in the filename parameter
    request:
      verify: False
      <<: *get_decoders
      params:
        select: 'id'
        filename: 'invalid'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

    # GET /decoders?q=name=agent-upgrade;position=2
  - name: Get decoders using query parameter
    request:
      verify: False
      <<: *get_decoders
      params:
        q: 'name=agent-upgrade;position=2'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *full_items_array
              name: 'agent-upgrade'
              position: 2
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  # GET /decoders?q=details.prematch~wazuh;filename=0005-wazuh_decoders.xml;position<5
  - name: Get decoders using query parameter
    request:
      verify: False
      <<: *get_decoders
      params:
        q: 'details.prematch.pattern~wazuh;filename=0005-wazuh_decoders.xml;position<5'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *full_items_array
              position: 0
          failed_items: []
          total_affected_items: 1
          total_failed_items: !anyint

    # GET /decoders?q=details.prematch~wazuh;filename=0005-wazuh_decoders.xml;position>5 (empty response)
  - name: Get decoders using query parameter
    request:
      verify: False
      <<: *get_decoders
      params:
        q: 'details.prematch~wazuh;filename=0005-wazuh_decoders.xml;position>5'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: !anyint

---
test_name: GET /decoders

marks:
  - parametrize:
      key: field
      vals:
        - filename
        - relative_dirname
        - name
        - position
        - status

stages:

    # GET /decoders?limit=1&sort={field}
  - name: Try to get decoders using an ascendent sorted field answer
    request:
      verify: False
      <<: *get_decoders
      params:
        limit: 1
        sort: "{field}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: *full_items_array
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # GET /decoders?limit=1&sort=-{field}
  - name: Try to get decoders using an descendent sorted field answer
    request:
      verify: False
      <<: *get_decoders
      params:
        limit: 1
        sort: "-{field}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: *full_items_array
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

---
test_name: GET /decoders/{decoder_name}
# We use {auditd-selinux_macstatus} as decoder_name for the purpose of this test

stages:

    # GET /decoders/{returned_name}
  - name: Try to get all decoders with specified decoder_name
    request: &get_decoders_with_name
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/decoders"
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        decoder_names: auditd-selinux_macstatus
        limit: 1
    response:
      status_code: 200
      json:
        # We get totalItems number of arrays in items, using !anything to check items key is in the response
        error: !anyint
        data: &decoder_name_response
          affected_items:
            - details: !anything
              filename: !anystr
              name: "auditd-selinux_macstatus"
              relative_dirname: !anystr
              position: !anyint
              status: !anystr
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # We implement a dual stage to check offset parameter behaviour
    # GET /decoders/auditd-selinux_macstatus?limit=2&offset=0
  - name: Try to get all decoders with specified decoder_name using limit and offset parameter
    request:
      verify: False
      <<: *get_decoders_with_name
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *full_items_array
            - <<: *full_items_array
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint
      # Save second item to check offset in next stage
      save:
        json:
          offset_item: data.affected_items[1]

    # GET /decoders/auditd-selinux_macstatus?limit=1&offset=1
  - name: Try to get all decoders with specified decoder_name using limit and offset parameter
    request:
      verify: False
      <<: *get_decoders_with_name
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
              # Check offset matches with previous request
            - details: !anything
              filename: "{offset_item.filename}"
              name: "{offset_item.name}"
              relative_dirname: "{offset_item.relative_dirname}"
              position: !int "{offset_item.position}"
              status: "{offset_item.status}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # GET /decoders/auditd-selinux_macstatus?limit=1&search=a
  - name: Try to get all decoders with specified decoder_name using limit and search parameter
    request:
      verify: False
      <<: *get_decoders_with_name
      params:
        limit: 1
        search: a
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *full_items_array
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # We perform a dual stage to test request using a wrong parameter and a wrong parameter value
    # GET /decoders/auditd-selinux_macstatus?limit=1&wrongparam=wrong
  - name: Try to get all decoders with specified decoder_name using limit and a wrong parameter
    request:
      verify: False
      <<: *get_decoders_with_name
      params:
        limit: 1
        wrongparam: "wrong"
    response:
      status_code: 400

    # GET /decoders/auditd-selinux_macstatus?limit=1&sort=wrong
  - name: Try to get all decoders with specified decoder_name using limit and a wrong parameter's value
    request:
      verify: False
      <<: *get_decoders_with_name
      params:
        limit: 1
        sort: "wrong"
    response:
      status_code: 400
      json:
        error: 1403

---
test_name: GET /decoders/{decoder_name}

marks:
  - parametrize:
      key: field
      vals:
        - filename
        - relative_dirname
        - name
        - position
        - status

stages:
    # GET /decoders/auditd-selinux_macstatus?sort={field}
  - name: Try to get all decoders with specified decoder_name using an ascendent sorted field answer
    request:
      verify: False
      <<: *get_decoders_with_name
      params:
        sort: "{field}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint
      save:
        json:
          total_items: data.total_affected_items

    # GET /decoders/auditd-selinux_macstatus?sort=-{field}
  - name: Try to get all decoders with specified decoder_name using an descendent sorted field answer
    request:
      verify: False
      <<: *get_decoders_with_name
      params:
        sort: "-{field}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !int "{total_items}"
          total_failed_items: !anyint

---
test_name: GET /decoders/files

stages:

    # GET /decoders/files
  - name: Try to get information about all decoders files
    request: &get_decoders_files
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/decoders/files"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        # We get totalItems number of arrays in items, using !anything to check items key is in the response
        error: !anyint
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # GET /decoders/files?limit=1
  - name: Try to get information about all decoders files using limit parameter
    request:
      verify: False
      <<: *get_decoders_files
      params:
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: &full_items_array_files
            - filename: !anystr
              relative_dirname: !anystr
              status: !anystr
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint
      # Save some data for future use in the test
      save:
        json:
          returned_files_filename: data.affected_items[0].filename
          returned_files_relative_path: data.affected_items[0].relative_dirname
          returned_files_status: data.affected_items[0].status

# We implement a dual stage to check offset parameter behaviour
    # GET /decoders/files?limit=2&offset=0
  - name: Try to get information about all decoders files using limit and offset parameter
    request:
      verify: False
      <<: *get_decoders_files
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *full_items_array_files
            - <<: *full_items_array_files
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint
      # Save second item to check offset in next stage
      save:
        json:
          offset_item: data.affected_items[1]

    # GET /decoders/files?limit=1&offset=1
  - name: Try to get information about all decoders files using limit and offset parameter
    request:
      verify: False
      <<: *get_decoders_files
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
              # Check offset matches with previous request
            - filename: "{offset_item.filename}"
              relative_dirname: "{offset_item.relative_dirname}"
              status: "{offset_item.status}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # GET /decoders/files?limit=1&search=a
  - name: Try to get information about all decoders files using limit and search parameter
    request:
      verify: False
      <<: *get_decoders_files
      params:
        limit: 1
        search: a
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *full_items_array_files
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # GET /decoders/files?limit=1&filename={returned_files_filename}
  - name: Try to get information about all decoders files using limit and file parameter
    request:
      verify: False
      <<: *get_decoders_files
      params:
        limit: 1
        filename: "{returned_files_filename:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - filename: "{tavern.request_vars.params.filename}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # GET /decoders/files?limit=1&relative_dirname={returned_files_relative_path}
  - name: Try to get information about all decoders files using limit and relative_dirname parameter
    request:
      verify: False
      <<: *get_decoders_files
      params:
        limit: 1
        relative_dirname: "{returned_files_relative_path:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - relative_dirname: "{tavern.request_vars.params.relative_dirname}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  # GET /decoders/files?limit=1&status={returned_files_status}
  - name: Try to get information about all decoders files using limit and status parameter
    request:
      verify: False
      <<: *get_decoders_files
      params:
        limit: 1
        status: "{returned_files_status:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - status: "{returned_files_status:s}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  # We perform a dual stage to test request using a wrong parameter and a wrong parameter value
  # GET /decoders/files?limit=1&wrongparam=wrong
  - name: Try to get information about all decoders using limit and a wrong parameter
    request:
      verify: False
      <<: *get_decoders_files
      params:
        limit: 1
        wrongparam: "wrong"
    response:
      status_code: 400

  # GET /decoders/files?limit=1&sort=wrong
  - name: Try to get information about all decoders using limit and a wrong parameter's value
    request:
      verify: False
      <<: *get_decoders_files
      params:
        limit: 1
        sort: "wrong"
    response:
      status_code: 400
      json:
        error: 1403

---
test_name: GET /decoders/files

marks:
  - parametrize:
      key: field
      vals:
        - filename
        - relative_dirname
        - status

stages:
    # GET /decoders/files?limit=1&sort={field}
  - name: Try to get information about all decoders files using an ascendent sorted field answer
    request:
      verify: False
      <<: *get_decoders_files
      params:
        limit: 1
        sort: "{field}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: *full_items_array_files
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

    # GET /decoders/files?limit=1&sort=-{field}
  - name: Try to get information about all decoders files using a descendent sorted field answer
    request:
      verify: False
      <<: *get_decoders_files
      params:
        limit: 1
        sort: "-{field}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: *full_items_array_files
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

---
test_name: GET /decoders/parents

stages:

    # GET /decoders/parents
  - name: Try to get information about all decoders parents
    request: &get_decoders_parents
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/decoders/parents"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        # We get totalItems number of arrays in items, using !anything to check items key is in the response
        error: !anyint
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  # GET /decoders/parents?limit=1
  - name: Try to get information about all decoders parents using limit parameter
    request:
      verify: False
      <<: *get_decoders_parents
      params:
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: &full_items_array_parents
            - details: !anything
              filename: !anystr
              name: !anystr
              relative_dirname: !anystr
              position: !anyint
              status: !anystr
          total_affected_items: !anyint

# We implement a dual stage to check offset parameter behaviour
    # GET /decoders/parents?limit=2&offset=0
  - name: Try to get information about all decoders parents using limit and offset parameter
    request:
      verify: False
      <<: *get_decoders_parents
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *full_items_array_parents
            - <<: *full_items_array_parents
          total_affected_items: !anyint
      # Save second item to check offset in next stage
      save:
        json:
          offset_item: data.affected_items[1]

    # GET /decoders/parents?limit=1&offset=1
  - name: Try to get information about all decoders parents using limit and offset parameter
    request:
      verify: False
      <<: *get_decoders_parents
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
              # Check offset matches with previous request
            - details: !anything
              filename: "{offset_item.filename}"
              name: "{offset_item.name}"
              relative_dirname: "{offset_item.relative_dirname}"
              position: !int "{offset_item.position}"
              status: "{offset_item.status}"
          total_affected_items: !anyint

  # GET /decoders/parents?limit=1&search=a
  - name: Try to get information about all decoders parents using limit and search parameter
    request:
      verify: False
      <<: *get_decoders_parents
      params:
        limit: 1
        search: a
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *full_items_array_parents
          total_affected_items: !anyint

    # We perform a dual stage to test request using a wrong parameter and a wrong parameter value
    # GET /decoders/parents?limit=1&wrongparam=wrong
  - name: Try to get information about all decoders parents using limit and a wrong parameter
    request:
      verify: False
      <<: *get_decoders_parents
      params:
        limit: 1
        wrongparam: "wrong"
    response:
      status_code: 400

    # GET /decoders/parents?limit=1&sort=wrong
  - name: Try to get information about all decoders parents using limit and a wrong parameter's value
    request:
      verify: False
      <<: *get_decoders_parents
      params:
        limit: 1
        sort: "wrong"
    response:
      status_code: 400
      json:
        error: 1403

---
test_name: GET /decoders/parents

marks:
  - parametrize:
      key: field
      vals:
        - filename
        - name
        - relative_dirname
        - position
        - status

stages:
  # GET /decoders/parents?limit=1&sort={field}
  - name: Try to get information about all decoders parents using an ascendent sorted field answer
    request:
      verify: False
      <<: *get_decoders_parents
      params:
        limit: 1
        sort: "{field}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: *full_items_array_parents
          total_affected_items: !anyint

  # GET /decoders/parents?limit=1&sort=-{field}
  - name: Try to get information about all decoders parents using a descendent sorted field answer
    request:
      verify: False
      <<: *get_decoders_parents
      params:
        limit: 1
        sort: "-{field}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: *full_items_array_parents
          total_affected_items: !anyint

---
test_name: GET /decoders/files/{file}/download

stages:

    # GET /decoders/files/{file}/download
  - name: Download a decoders file
    request:
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/decoders/files/0005-wazuh_decoders.xml/download"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      headers:
        content-type: 'application/xml; charset=utf-8'

    # GET /decoders/files/{wrong_file}/download
  - name: Try to download a decoders file using a wrong filename
    request:
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/decoders/files/wrongfile/download"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        error: 1503
