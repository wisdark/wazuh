---
test_name: GET /lists

marks:
  - base_tests

stages:

    # GET /lists
  - name: Try to get all lists
    request: &get_lists
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/lists"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

    # GET /lists?limit=0
  - name: Try to get lists using wrong limit parameter
    request:
      verify: False
      <<: *get_lists
      params:
        limit: 0
    response:
      status_code: 400

    # GET /lists?limit=1
  - name: Try to get lists using limit parameter
    request:
      verify: False
      <<: *get_lists
      params:
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - items: !anything
              relative_dirname: !anystr
              filename: !anystr
          failed_items: []
          total_affected_items: 4 # Number of cdb_lists by default in Wazuh, this number may change anytime, update accordingly
          total_failed_items: 0
      # Save some data for future use in the test
      save:
        json:
          returned_relative_dirname: data.affected_items[0].relative_dirname
          returned_filename: data.affected_items[0].filename

    # We implement a dual stage to check offset parameter behaviour
    # GET /lists?limit=2&offset=0
  - name: Try to get lists using limit and offset parameter
    request:
      verify: False
      <<: *get_lists
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - items: !anything
              relative_dirname: !anystr
              filename: !anystr
            - items: !anything
              relative_dirname: !anystr
              filename: !anystr
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0
      # Save second item to check offset in next stage
      save:
        json:
          offset_item_relative_dirname: data.affected_items[1].relative_dirname
          offset_item_filename: data.affected_items[1].filename

    # GET /lists?limit=1&offset=1
  - name: Try to get lists using limit and offset parameter
    request:
      verify: False
      <<: *get_lists
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - items: !anything
              relative_dirname: "{offset_item_relative_dirname}"
              filename: "{offset_item_filename}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Show lists using valid select
    request:
      verify: False
      <<: *get_lists
      params:
        # Single and nested select
        select: 'filename'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'filename,relative_dirname' # required_fields={'filename', 'relative_dirname'}
      status_code: 200
      json:
        error: !anyint
        data:
          total_affected_items: !anyint
          failed_items: []
          total_failed_items: 0

  - name: Show lists using invalid select
    request:
      verify: False
      <<: *get_lists
      params:
        select: 'noexists'
    response:
      status_code: 400
      json: &invalid_select
        error: 1724

  - name: Show lists using select (one select is invalid)
    request:
      verify: False
      <<: *get_lists
      params:
        select: 'filename,noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Show lists using select and specifying a non-existent file in the filename parameter
    request:
      verify: False
      <<: *get_lists
      params:
        select: 'filename'
        filename: 'invalid'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

    # GET /lists?limit=1&search={returned_relative_dirname:s}
  - name: Try to get lists using limit and search parameter
    request:
      verify: False
      <<: *get_lists
      params:
        limit: 1
        search: "{returned_relative_dirname:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

    # GET /lists?limit=1&search=-{returned_filename:s}
  - name: Try to get lists using limit and search parameter
    request:
      verify: False
      <<: *get_lists
      params:
        limit: 1
        search: "-{returned_filename:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

    # GET /lists?limit=1&search=empty_search
  - name: Try to get lists using limit and an empty search parameter
    request:
      verify: False
      <<: *get_lists
      params:
        limit: 1
        search: "empty_search"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

    # GET /lists?limit=1&relative_dirname={returned_relative_dirname}
  - name: Try to get lists using limit and relative_dirname parameter
    request:
      verify: False
      <<: *get_lists
      params:
        limit: 1
        relative_dirname: "{returned_relative_dirname:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - items: !anything
              relative_dirname: "{tavern.request_vars.params.relative_dirname}"
          failed_items: []
          total_affected_items: 2 # Number of cdb_lists by default in Wazuh with this relative_dirname, this number may change anytime, update accordingly
          total_failed_items: 0

    # GET /lists?limit=1&relative_dirname=wrong_dirname
  - name: Try to get lists using limit and a wrong relative_dirname parameter
    request:
      verify: False
      <<: *get_lists
      params:
        limit: 1
        relative_dirname: "wrong_relative_dirname"
    response:
      status_code: 400

    # GET /lists?relative_dirname=etc/files
  - name: Try to get a CBD list from a bad format etc path
    request:
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/lists"
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        relative_dirname: "etc/files"
    response:
      status_code: 400

    # GET /lists?filename=wrong_filename
  - name: Try to get a CBD list from a non existing filename
    request:
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/lists"
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        filename: "wrong_dirname"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

---
test_name: GET /lists/files

stages:

  # GET /lists/files
  - name: Try to get paths from all CDB lists
    request: &get_lists_files
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/lists/files"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
           # We get totalItems number of arrays in items, using !anything to check items key is in the response
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

    # GET /lists/files?limit=0
  - name: Try to get paths from all CDB lists using wrong limit parameter
    request:
      verify: False
      <<: *get_lists_files
      params:
        limit: 0
    response:
      status_code: 400

    # GET /lists/files?limit=1
  - name: Try to get paths from all CDB lists using limit parameter
    request:
      verify: False
      <<: *get_lists_files
      params:
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: &full_items_array_files
            - relative_dirname: !anystr
              filename: !anystr
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0
      # Save some data for future use in the test
      save:
        json:
          returned_relative_dirname: data.affected_items[0].relative_dirname
          returned_filename: data.affected_items[0].filename

    # We implement a dual stage to check offset parameter behaviour
    # GET /lists/files?limit=2&offset=0
  - name: Try to get paths from all CDB lists using limit and offset parameter
    request:
      verify: False
      <<: *get_lists_files
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *full_items_array_files
            - <<: *full_items_array_files
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0
      # Save second item to check offset in next stage
      save:
        json:
          offset_item_relative_dirname: data.affected_items[1].relative_dirname
          offset_item_filename: data.affected_items[1].filename

    # GET /lists/files?limit=1&offset=1
  - name: Try to get paths from all CDB lists using limit and offset parameter
    request:
      verify: False
      <<: *get_lists_files
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
              # Check offset matches with previous request
            - filename: "{offset_item_filename}"
              relative_dirname: "{offset_item_relative_dirname}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

    # GET /lists/files?limit=1&search={returned_relative_dirname:s}
  - name: Try to get paths from all CDB lists using limit and search parameter
    request:
      verify: False
      <<: *get_lists_files
      params:
        limit: 1
        search: "{returned_relative_dirname:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *full_items_array_files
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

    # GET /lists/files?limit=1&search=-{returned_relative_dirname:s}
  - name: Try to get paths from all CDB lists using limit and search parameter
    request:
      verify: False
      <<: *get_lists_files
      params:
        limit: 1
        search: "-{returned_relative_dirname:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

    # GET /lists/files?limit=1&search=empty_search
  - name: Try to get paths from all CDB lists using limit and an empty search parameter
    request:
      verify: False
      <<: *get_lists_files
      params:
        limit: 1
        search: "empty_search"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0
