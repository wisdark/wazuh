---
test_name: GET /tasks/status

marks:
  - base_tests

stages:

  - name: Get all existent tasks (At this point there is no task created)
    request: &get_tasks
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/tasks/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

  - name: Upgrade an agent
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/upgrade"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        force: True
        agents_list: '003,004,005,006'
        version: '4.0.1'
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - agent: '003'
              task_id: !anyint
            - agent: '004'
              task_id: !anyint
            - agent: '005'
              task_id: !anyint
            - agent: '006'
              task_id: !anyint
          total_affected_items: 4
          total_failed_items: 0
          failed_items: []
        message: !anystr

  - name: Upgrade an agent (Invalid version)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/upgrade"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        force: True
        agents_list: '007'
        version: '2.0.0'
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - agent: '007'
              task_id: 5
          total_affected_items: 1
          total_failed_items: 0
          failed_items: []
        message: !anystr

---
test_name: GET /tasks/status

stages:

  - name: Get all existent tasks, in progress (Limit 1)
    request:
      verify: False
      <<: *get_tasks
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: &task
            - agent_id: !anystr
              create_time: !anyint
              node: !anystr
              status: "In progress"
              last_update_time: !anyint
              command: "upgrade"
              module: "upgrade_module"
              task_id: 2
          failed_items: []
          total_affected_items: 5
          total_failed_items: 0

  - name: Get all existent tasks, in progress (Limit 2)
    request:
      verify: False
      <<: *get_tasks
      params:
        limit: 2
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - agent_id: !anystr
              create_time: !anyint
              node: !anystr
              status: "In progress"
              last_update_time: !anyint
              command: "upgrade"
              module: "upgrade_module"
              task_id: 1
            - <<: *task
          failed_items: []
          total_affected_items: 5
          total_failed_items: 0
    delay_after: !float "{upgrade_delay}"

  - name: Get all existent tasks, completed (Limit 1)
    request:
      verify: False
      <<: *get_tasks
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *task
              status: "Legacy"
          failed_items: []
          total_affected_items: 5
          total_failed_items: 0

  - name: Try to get tasks using select parameter
    request:
      verify: False
      <<: *get_tasks
      params:
        select: "task_id"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_select_key_affected_items
          extra_kwargs:
            select_key: "task_id"
      save:
        json:
          select_id_items: data.affected_items

  - name: Try to get tasks using select parameter
    request:
      verify: False
      <<: *get_tasks
      params:
        select: "task_id,node,module"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_select_key_affected_items
          extra_kwargs:
            select_key: "task_id,node,module"

  - name: Try to get tasks using select parameter with incorrect field
    request:
      verify: False
      <<: *get_tasks
      params:
        select: "incorrect_field"
    response:
      status_code: 400

  - name: Try to get all tasks using sort parameter with incorrect field
    request:
      verify: False
      <<: *get_tasks
      params:
        sort: "-incorrect_field"
    response:
      status_code: 400

  - name: Try to get all tasks using sort parameter and limit parameter
    request:
      verify: False
      <<: *get_tasks
      params:
        select: "task_id"
        sort: "-task_id"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            affected_items: "{select_id_items}"

  - name: Verify that query parameter work as expected
    request:
      verify: False
      <<: *get_tasks
      params:
        q: "agent_id=004"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "agent_id"
            expected_values: "004"

  - name: Verify that query parameter work as expected
    request:
      verify: False
      <<: *get_tasks
      params:
        q: "agent_id>004;agent_id<006"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "agent_id"
            expected_values: "005"

  - name: Verify that query parameter work as expected (using non-existent agent_id)
    request:
      verify: False
      <<: *get_tasks
      params:
        q: "agent_id=099"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: !anyint

  - name: Verify that query parameter work as expected when using multiple values
    request:
      verify: False
      <<: *get_tasks
      params:
        q: "agent_id=004;status=Legacy;module=upgrade_module;command=upgrade"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "agent_id"
            expected_values: "004"
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "status"
            expected_values: "Legacy"
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "module"
            expected_values: "upgrade_module"
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "command"
            expected_values: "upgrade"

  - name: Verify that query parameter work as expected (wrong_field)
    request:
      verify: False
      <<: *get_tasks
      params:
        q: "wrong_field=INVALID"
    response:
      status_code: 400

---
test_name: GET /tasks/status (Filters)

stages:

  - name: Get specified tasks
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/tasks/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        tasks_list: 4,3
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *task
              status: "Legacy"
              last_update_time: !anyint
              agent_id: !anystr
              task_id: 3
            - <<: *task
              status: "Legacy"
              last_update_time: !anyint
              agent_id: !anystr
              task_id: 4
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Get specified tasks, agent_id (003)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/tasks/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: ["003","000"]
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *task
              status: "Legacy"
              last_update_time: !anyint
              agent_id: "003"
              task_id: !anyint
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Get specified tasks, agent_id (000)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/tasks/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: ["000"]
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

  - name: Get all existent tasks, Failed
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/tasks/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        status: "Failed"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - agent_id: "007"
              create_time: !anyint
              node: !anystr
              status: "Failed"
              last_update_time: !anyint
              command: "upgrade"
              module: "upgrade_module"
              error_message: !anystr
              task_id: 5
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Get all existent tasks, upgrade_module
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/tasks/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        module: "upgrade_module"
    response:
      status_code: 200
      json: &task_module_response
        error: !anyint
        data:
          affected_items:
            - <<: *task
              status: "Legacy"
              last_update_time: !anyint
              task_id: 1
            - <<: *task
              status: "Legacy"
              last_update_time: !anyint
              task_id: 2
            - <<: *task
              status: "Legacy"
              last_update_time: !anyint
              task_id: 3
            - <<: *task
              status: "Legacy"
              last_update_time: !anyint
              task_id: 4
            - <<: *task
              status: "Failed"
              last_update_time: !anyint
              task_id: 5
          failed_items: []
          total_affected_items: 5
          total_failed_items: 0

  - name: Get all existent tasks, upgrade command
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/tasks/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        command: "upgrade"
    response:
      status_code: 200
      json: *task_module_response

  - name: Get all existent tasks, specifing node name (worker2)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/tasks/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        node: "worker2"
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          total_affected_items: !anyint
          affected_items: !anything
          failed_items: []
          total_failed_items: 0
      verify_response_with:
        function: tavern_utils:test_response_is_different
        extra_kwargs:
          response_value: total_affected_items
          unexpected_value: task_module_response.data.total_affected_items
